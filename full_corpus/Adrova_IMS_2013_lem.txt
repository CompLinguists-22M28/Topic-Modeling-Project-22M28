исследование алгоритм хеширования, использовать для аутентификация в web-приложениях л.с. адрова, п.н. полежаев оренбургский государственный университет 1. проблема хранение пароль пользователь в web-приложение в настоящий время широкий распространение получить различный интернет-сервисы, поэтому пользователь стать частый задумываться о безопасность при работа в глобальный сети. основной способ аутентификация в web-приложение — использование логин и пароля, который обычно храниться в некоторый база дать приложения. зачастую они храниться в открытый вид (дажа на очень популярный сайтах), что облегчать работа злоумышленник по они получение с помощь sql-инъекция и последующий аутентификация на сайте. пример система управление содержимое (content management system, cms), хранить пароль в открытый виде, служить aqua cms, jasp и liferay. один из вариант хранение пароль в база дать приложение — использование хешировать пароля. например, в 1c битрикс, drupal 6.15 и phpnuke использоваться результат применение алгоритм md5 к паролю. radiant использовать хеширование по схема sha1(sha1(password)). в данный случай трудный получить исходный пароль, однако для он восстановление мочь быть использовать радужный таблицы, содержать миллиард пара «пароль – результат хеширования». радужный таблица доступный в интернет и составить для весь словарный паролей. радужный таблица мочь достигать гигантский размеров, но вычисление исходный пароль быть зависеть только от время поиск по ним. яркий пример служить утечка 6,5 миллион пароль из база дать социальный сеть linkedin. алгоритм хеширование пароль sha-1, использовать без соль позволить злоумышленник за шесть день получить доступ к 90% пароль социальный сеть [5]. кроме того, в последний год возрасти вычислительный мощность gpu, они способный вычислять миллиард хеш в секунду. поэтому в настоящий время даже длинный пароль не мочь считаться безопасными. для решение дать проблема необходимо использовать соль, причём уникальный для каждый пользователя. использование общий соль для весь пользователь сайт позволять сгенерировать единый радужный таблицу, а затем она применить к запись весь пользователь для получение паролей. неэффективность данный приём можно увидеть на пример хеширование пароль в cms efront 3.6.4, который добавлять к алгоритм хеширование md5 соль, единый для весь пользователей: md5(password.'cdwqr#$rcxsc'). в случай уникальный соль — генерация пароль бессмысленна, в это случай единственный способ — брутфорс (перебор пароль по словарь или полный перебор символ из набора) с последующий они хеширование с уникальный соль и сравнение с украсть хеш-значением. пример такой использование соль мочь служить алгоритм хеширование joomla — md5(password.salt). чтобы предотвратить взлом пароль нужно использовать медленный хеш-функция или увеличить число раунд для быстрый хеш-функций. один из пример использование увеличение число раунд хеш-функция мочь служить алгоритм хеширование cms ipb 1.3-2.17 и mybb 1.2.x: md5(md5(salt). md5(password)). цель настоящий работа являться исследование применительно к аутентификация в web-приложение различный алгоритм хеширования, разработка рекомендация по они использованию. 2. исследование различный алгоритм хеширование 2.1. анализ время работа стандартный алгоритм хеширование для исследование быть взять наиболее популярный алгоритм хеширования: md5, sha512, ripemd320, whirpool, tiger и gost. часть из они входить в стандартный библиотека .net, другой в открытый библиотека cryptsharp [3]. в результат исследование быть определить зависимость время они выполнение (в мс) от размер пароль (см. рисунок 1). длина пароль варьироваться от 2 до 20 символов. время выполнение алгоритм практически идентично, единственно из общий ряд выбиваться алгоритм gost. время хеширование это алгоритм достигать 0,046-0,047 мс. но в целое время хеширование слишком мало, чтобы противостоять атака брутфорса. 2.2. анализ время работа алгоритм хеширование bcrypt и scrypt больший время хеширование обеспечивать алгоритм bcrypt [1] и scrypt [2]. в результат исследование также быть определить зависимость время выполнение дать алгоритм (в мс) от размер пароль по сравнение с выше перечисленный алгоритм хеширование (md5, sha512, ripemd320, whirpool, tiger, gost) (см. рисунок 2). это два достаточно медленный хешфункции. алгоритм хеширование bcrypt использовать соль для защита от радужный таблиц. однако bcrypt быть разработать в 1999 году, поэтому он защитить от перебор на компьютер тот времени. сейчас появиться плис, который ускорять выполнение bcrypt для брутфорса. в 2009 год быть создать алгоритм scrypt, который работать медленный и требовать значительный объём памяти, что являться дополнительный достоинством. алгоритм scrypt использовать память с случайный доступом, она объём мочь настраиваться. у оба алгоритм настраиваться стоимость хеширование (количество внутренний раундов), у scrypt можно дополнительно изменять размер блока, что позволять увеличивать время хеширование паролей. дать алгоритм быть реализовать на язык c#, исследоваться зависимость время выполнение scrypt от стоимость и размер блока, bcrypt – от размер блока. усреднить значение время в результат повторение замереть 100 раз привести в таблица 1. если принять в качество предельный время аутентификация 250 мс, то наиболее близкий к он значение в 247,46 и 243,50 мс обеспечиваться алгоритм scrypt при соответствовать значение (27, 28) и (28, 27) (первое число — стоимость, второе — размер блока). у bcrypt это значение намного ниже, порядок 167,95 мс, что значительно быстрый и, следовательно, уровень безопасность хеширование понижается. 2.3. исследование алгоритм хеширование в зависимость от число использовать раунд второй подход к борьба с полный перебор пароль – увеличение число раундов. в данный случай алгоритм bcrypt и scrypt не подходят, так как не рекомендоваться добавление дополнительный внешний раундов. в ход сравнительный анализ алгоритм хеширование по критерий устойчивость к известный атака обращения, нахождение коллизии, определение второй прообраза, выяснилось, что среди рассматривать алгоритм хеширование больший стойкость обладать gost и sha512. поэтому они и быть выбрать для дальнейший рассмотрения. рисунок 3 иллюстрировать зависимость время работа алгоритм gost от число раундов, который иметь линейный характер, рисунок 4 — аналогичный зависимость для алгоритм sha512. максимальный допустимый время аутентификация достигаться при ~4695 раундах. аналогично для более быстрый алгоритм sha512 быть получить значение в ~15650 раундов. расчёт показывают, что при максимальный число раунд для дать алгоритм и максимальный время аутентификация в 250 мс перебор 100000 наиболее распространить словарный пароль занять приблизительно 7 часов. это лишний раз подтверждать необходимость использование сложных, близкий к случайный паролей. полный перебор алфавитно-цифровой пароль средний длина от 6 до 8 символ занять около 880000 дней, что достаточно велико. однако мощный суперкомпьютер с 1000 ядро справиться с этот задача за 2.5 года. возникать вопрос – как влиять увеличение количество раунд на криптостойкость функция хеширования? провести математический расчёт [4], можно показать, что сужение выходной множество после выполнение i раунд мочь быть определить из следующий рекуррентный формулы: значение сужение мочь быть перевести в битый с помощь функции: где — число, показывать в сколько раз сократиться выходной множество (в битах). на рисунок 5 привести график зависимость r до 50000 итераций. данный график показывать медленный рост снижение криптостойкость с рост число раундов. 3. результат исследование в результат провести исследование получить следующий выводы:  важно использовать при хеширование пароль уникальный соль для защита от радужный таблиц;  необходимо увеличивать время хеширования, для защита от перебора, в данный случай мы отдавать преимущество функция хеширование — scrypt. данный алгоритм достаточно новый, иметь настраивать объём память для хеширования, а также это очень медленный алгоритм, что являться важный параметр в хешировании. оптимальный значение пара (раунды, размер блока) для scrypt: (27, 28) и (28, 27);  оптимальный количество раунд для gost- 4695, для sha512 — 15650, что приводить к сужение выходной множество соответственно на 12 и 13 бит, что незначительно при он размер в 256 и 512 битый соответственно;  современный метод аутентификация по пароль защитить от полный перебора, но не от атака по словарю. очень важно, чтобы пользователь создавать случайный пароль длина от 8 символ и более, так как время перебор по словарь пароль такой длина достаточно велико;  на основа провести исследования, мы рекомендовать использовать scrypt с задать параметр или gost/sha512 с вычислить число раунд для больший защищённость web-приложение от взлом паролей.