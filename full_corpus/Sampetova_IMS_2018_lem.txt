реализация алгоритм автоматический исправление опечатка в русскоязычный текст в.в. сампетова, в.о. луканина, а.д. москвина, о.а. митрофанов санкт-петербургский государственный университет санкт-петербург введение сегодня создание эффективный и доступный инструмент автоматический исправление опечатка в текст на русский язык являться особенно актуальный задача в связь с распространение цифровой технология и расширение сфера применение устройство с текстовый вводом–выводом, использовать метод и алгоритм автоматический обработка естественный языка. решение задача автоматический исправление опечатка иметь огромный практический значение, это важно как в повседневный жизнь при обмен сообщение в социальный сетях, при переписка в мессенджерах, так и в научный исследованиях, проводить на материал так называть “грязных” текст из сеть интернет. корпус текст из новостной электронный сми и из социальный сетей, как правило, иметь большой размер (с один стороны, есть возможность собрать такой данные, с другой – цель и методы, связанный с такой текстами, требовать существенный объём данных, в частности, для машинный обучения). такой текст рассматриваться как “грязные” из-за изобилие опечаток, дублетов, нетекстовый элементов. для обработка на морфосинтаксический и семантический уровень они должный пройти графематический анализ. один из проблем, решать на данный этапе, связать именно с выявление и исправление опечаток, что в дальнейший повышать точность токенизация и морфологический аннотация текстов. актуальность исследование в область автоматический исправление опечатка в русскоязычный текст подтверждаться в обсуждение материал соревнование spellrueval−2016, прошедшее в рамка международный конференция по компьютерный лингвистика и интеллектуальный технология “диалог−2016” [1]. опечатка являться наиболее простой вид орфографический ошибок. большинство предлагать решение связать с вычисление вероятность замена в зависимость от расположение буква на клавиатуре, как например, в работа [2]. наряду с этим, быть создать фонетический алгоритм для исправление орфографический ошибок. пример подобный алгоритм является, в частности, soundex [3], в который кодироваться произношение слов, и для каждый код формироваться набор символов-омофонов, из который подбираться правильный вариант на замену. большинство создать алгоритм исправлять каждый отдельно взять слово. несмотря на то, что сейчас всё больший внимание уделяться разработка подход с контекстно-зависимый исправлением, при изучение литература быть обнаружено, что и без применение подобный подход процент правильный замена достаточно высок. согласно данным, обсуждать в работа [4], “длить больший часть словарный ошибка (74%) исправление в контекст и без контекст совпадают”, соответственно, в наш исследование на данный этап он использоваться не будет. такой образом, в настоящий время существовать множество различный подход к решение дать проблемы, но большинство алгоритм создаваться для английский языка. и в связь с различие английский и русский язык на весь лингвистический уровнях, исправление опечатка в слово на русский язык требовать разработка собственный подход и более подходящий алгоритма. в основа наш подход лечь результат исследование 1964 г. ф.дж. дамерау о определение и исправление ошибка правописания. они быть выявлено, что 80% весь ошибочно напечатать слово иметь лишь один ошибочный позиция из следующих: вставка, удаление, замена или перестановка [5]. так как алгоритм должный не только определять ошибочный слово, но и исправлять его, быть использовать техника исправление ошибка в отдельный словах, особый внимание быть уделить типографический ошибка [6], как наиболее частым. структура статья такова: раздел 2 посвятить описание использовать мы методов; в раздел 3 привести лингвистический дать материал для обучение алгоритм и проверка он работы; в раздел 4 привести результат провести работы, вывод и план для будущий работы. метод предположение о том, что опечатка возникать из-за некорректный ввод с клавиатура электронный устройств, послужить основа для выбор метод дать работы. также вспомогательный материал для создание код послужить программа, свободно разместить на github (https://github.com/machyne/spelling). с помощь язык python быть создать симметричный карта для весь пара буква с соответствовать они вес замен. быть учесть горизонтальная, вертикальный и диагональный близость буква на клавиатуре, а также схожий по звучание буква и адаптировать для русский языка. например, для буква “а” быть подобрать следующий пары: по горизонталь − “а” − “п”; “а” − “в”; по вертикаль − “а” − “м”; “а” − “с”; по диагональ − “а” − “у”; “а” − “е”. также быть принять в внимание ошибки, допускать независимо от расположение клавиша на клавиатуре, для “а” это такой пара как, “а” − “о”: “молоко” − “малако”; “а” − “я”: “чаща” − “чящя”; “а” − “и”: “маленький” − “маленькай”. к дать матрица быть применить алгоритм расчёт расстояние левенштейна. расстояние левенштейна, или дистанция редактирование − это минимальный количество операция (вставка, удаление или замена), который направить для преобразование один строка в другой краткий способом. при применение данный алгоритм образоваться матрица дистанций, в данный случай быть получить матрица значение близость пара букв. в этот матрица дистанция указать числовой значения, который зависеть от того, в какой расположение от рассматривать буква находиться всё остальные, так, если буква “в” находиться рядом с “а”, в ячейка матрица сохраняться вес 1,5. вес число подобрать вручную и служить для обозначение только вероятность замена буква при вводе, чем близкий буква находиться по отношение к нужной, значит, тем маленький вероятность записать она правильно, поэтому малый число означать больший вероятность ошибка (см. табл. 2). в случае, если буква в матрица совпадают, по умолчание ставиться 0, для дополнительный значения, который не зависеть от близость клавиша − 2. также для ввод лишний буква или пропуск выбрать значение 3, оно не представить в матрице, поскольку реализоваться непосредственно в формула левенштейна. следующий шаг быть применение спеллчекера. каждый предложение в входной текст посредством библиотека nltk [7] токенизируется, т.е. разбиваться на отдельно значимый единица (слова, символы, пробелы) для последующий компьютерный обработки. второй список токен затем создаваться только из слов. этот список инвертируется, и каждый слово проверяется. каждый слово приписываться вероятность, который представлять себя средний вероятность триграмм это слова: сам слова, допустим, b, предыдущий от он − a и следующий за они – c: например, для слово “пошел” триграмм быть выглядеть следующий образом: яa пошелb гулятьc. этот вероятность триграмм рассчитать при помощь взвесить линейный интерполяция (p) вероятность униграмм, биграмм и триграмм, посчитать как коэффициент счетов. p(w |w -1...w ) = a p (w ) + a p (w |w ) + … +a p (w |w -1...w -1), где 0<=a <=1 и ∑ i a =1 , где p − статистический функция для i-грамм. каждый слово приписываться список хороший кандидат на замену. для тот чтобы получить хороший кандидата, сначала определяться набор кандидатов. этот набор включать в себя каждый слово, который мочь следовать за два предыдущими, и каждый слово, который начинаться с буква равной, “схожей”, или горизонтально смежный по отношение к первый буква слово с предполагать опечаткой. этот вес, приписать к любой кандидату, − это линейный комбинация расстояние для замена в ошибочный слово и вероятность, который оно получит, если произойти замена. список хороший замена – это 10 первый кандидат по счету. наконец, если у слово крайне низкий вероятность, и программа не установить хороший кандидата, то оно быть отметить как “неправильное” и пользователь предложить сам исправить отметить слово. исследовательский материал тестирование инструмент быть провести на материал публицистический стать информационный веб-портал медуза [8]. для получение тестовый результат из тренировочный текст быть произвольно 2 выбрать слово и заменить на ошибочные. в дальнейший для получение экспериментальный результат быть использовать материал из корпус жж гикрить (30 млн с/у), который быть предоставить для конкурс morphrueval−2017, прошедшее в рамка международный конференция по компьютерный лингвистика и интеллектуальный технология «диалог−2017» [9]. поскольку в данный корпус собрать уже исправить текст из социальный сеть (livejournal), то обучение быть проходить именно на них, а проверка работоспособность данный алгоритм быть проверить на “грязных” текстах, который позволить выяснить реальный возможность и эффективность программы. результат первый шаг работа алгоритм быть запуск тренировочный файл через консоль/терминал. после это в командный строка запускаться файл с ошибка и пропускаться через уже обученный программу. алгоритм находить ошибочный слово, предлагать 10 вариант замена и возможность ввести слово сам пользователем, принимать правильный вариант замены. можно заключить, что процесс обучение проходить правильно, так как он определять слово с опечатками, и на первый место предлагать нужный вариант на замена (см. табл. 2). заключение дать работа посвятить реализация алгоритм для автоматический исправление опечаток. опечатка составлять больший часть ошибка в печатный тексте, и являться наиболее простой для правильный автоматический исправления, так как не зависеть от контекста, в который использовать слово. на нынешний этап проведение эксперимент работа алгоритм считаться удовлетворительный и эффективной: алгоритм находить слово с ошибка и предлагать правильный кандидат на замену, также предлагать ввести собственный вариант, если ни один из кандидат не подходит. тем не менее, использовать программный обеспечение требовать доработки, что предполагать он адаптация в python 3.5, совершенствование кода, добавление ряд орфографический правил, который смочь улучшить работа алгоритм и устранить недостаток вероятностный подхода. на следующий этап эксперимент быть провести на более обширный и разнообразный материале. исследование поддержать грант рффи № 16-06-00529 «разработка лингвистический комплекс для автоматический семантический анализ русскоязычный корпус текст с применение статистический методов» (2016–2018 гг.).