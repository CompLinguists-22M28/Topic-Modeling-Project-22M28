программный реализация на база платформа apache jena вопросно-ответный системы, использовать дать онтология а.в. мочалова, в.а. мочалов институт космофизический исследование и распространение радиоволна дво ран stark345@gmail.com, sensorlife@mail.ru 1. введение 1.1. общий схема работа вопросно-ответный система на основа анализ существующий разработка вопросно-ответный систем, можно сделать вывод о том, что качественный система ответ на вопрос функционировать в соответствие с определённый схемой, представить на рисунок 1. на вход система подаваться вопрос, сформулировать на естественный языке. затем текст вопрос проходить автоматический обработку, основной этап который следующие: предварительный обработка текст (включать в себя удаление лишний символ форматирования, исправление орфографический и пунктуационный ошибок, удаление лишний пробел и символ перенос строка и т.п.); извлечение именовать сущностей; разбиение текст на предложения; токенизация (разбиение предложение на слова); морфологический, синтаксический и семантический анализ. модуль автоматический анализ текста, как правило использовать различный структурировать лингвистический ресурсы: словари, база данных, база фактов, онтологии. в некоторый вопросно-ответный система часть из вышеперечисленный этап автоматический обработка текст мочь быть пропустить или выполняться в упрощённый виде, а часть наоборот --- являться сборник научный стать международный объединить конференция «интернет и современный общество», ims. основополагающий для работа весь системы, как, например, семантический анализ в работа м.в. мозговой [1]. затем текст вопрос классифицироваться в соответствие с принять в дать система классификацией. на база результат автоматический обработка текст вопрос и результат классификация вопрос формироваться запрос, который передаваться поисковый машине. далее поисковый машина выбирать определённый количество документ (есть поиск производиться не по один задать документу), наиболее релевантный запросу. выбор документ мочь производиться с помощь внешний поисковый систем, либо с помощь собственный поисковый машины, являться часть разрабатывать системы. в некоторый случай поиск документ производиться в ограниченный специализировать коллекция документов, который располагать система. эффективный подход к организация поисковый система предложный в работа [2], где предлагаться архитектура субпоисковый системы, который формировать собственный база документ и собственный поисковый индекс, а для ускорение процесс сбор потенциально интересовать документ использовать внешний поисковый система (google, яндекс, bing). на рисунок 2 представить диаграмма соотношение множество документ в такой субпоисковый система (i --- множество документов, доступный в сеть интернет, w --множество документов, отобрать интернет поисковый системой, s --- множество документов, отобрать субпоисковый системой). текст каждый из выбрать документов, также как и текст вопроса, подвергаться автоматический обработке. при это алгоритм машинный обработка текст вопрос мочь отличаться от алгоритм машинный обработка набор документов, выбрать поисковый системой. далее, посредством внутренний алгоритм работа вопросноответный системы, происходить выбор конкретный фрагмент текст из документов, передать поисковый системой. выбрать фрагмент текст представляться система в качество ответа. наиболее продвинуть вопросно-ответный система на этап выбор фрагмент текст мочь использовать дать из структурировать лингвистический ресурсов. информация из этот лингвистический ресурс мочь дополнять ответ/ответ системы. в связь с тем, что результат машинный обработка текст передаваться модуль вопросно-ответный системы, от который напрямую зависеть ответ система на вопрос, можно сделать вывод, что задача автоматический обработка текст являться один из важный задач, решать в рамка работа вопросно-ответный система и от корректность работа модуль обработка текст напрямую зависеть корректность работа весь системы. 1.2. применение тезаурус при разработка вопросно-ответный система один из понимание тезаурус подразумевать словарь, с максимальный полнота представлять лексика язык в весь она полнота с пример употребление в текстах. однако с точка зрение применение тезаурус в вопросно-ответный система он следовать понимать как информационно-поисковый тезаурус, как словарь общий или частый специальный лексики, в который в явный вид указать семантический отношение между лексический единица (синонимия, антонимия, гипонимия, гиперонимия и т.п.). многие прочий отношение часто объединяться в общий класс ассоциативный отношений. в отличие от толковый словаря, тезаурус позволять выявлять смысл не с только с помощь определения, но и посредством соотнесение слово с другой понятие и они группами. тезаурус - это терминологический ресурс, реализовать в вид словарь понятие и термин с связь между ними. основный он назначение - помощь при информационный поиске: на основа связь тезаурус происходить расширение запроса, навигация по связь тезаурус помогать чёткий сформулировать сам запрос.[3] качество работа вопросно-ответный система напрямую зависеть от качество и объём использовать тезаурусов. использоваться они мочь на разный уровень реализация такой системы, например, при определение граница синтаксем, выделение именовать сущностей, в модуле, выполнять семантический анализ текста, а также непосредственно в алгоритм поиск ответ на вопрос в анализировать тексте. следовать отметить, что в широкий понимание онтология тезаурус тоже являться онтологиями. в этот работа описываться вопросно-ответный система, использовать дать из известный лингвистический ресурс – тезаурус рутеза [4], хранить дать в структурировать виде. описываться использование рутеза для выделение именовать сущность в тексте, показываться как с помощь sparql-запрос и онтосемантический анализатора, использовать вопросно-ответный системой, формироваться ответ на задать пользователь вопросы. 2. архитектура вопросно-ответный система на база платформа apache jena в настоящий время весьма актуальный задача являться разработка вопросно-ответный систем, позволять отвечать на вопрос пользователей, задать на естественный язык по машиночитаемый текст на естественный языке. этот работа посвятить описание архитектура вопросно-ответный системы, основать на база платформа apache jena и использовать дать из онтологии. на рисунок 3 приводиться обобщённый архитектура вопросно-ответный система [5], основать на использование семантический анализатора, построить по математический модели, описать в работа [6]. на вход вопросно-ответный система подаваться вопрос q на естественный язык и пользовательский текст t , выбрать пользователь для поиск ответ на вопрос q. текст t и вопрос q поступать на вход модуль начальный обработка текста, в который происходить выполнение следующий шагов: предварительный обработка, токенизация, морфологический анализ, выделение неделимый смысловой единиц. результат начальный обработка t и q записываться в f (t) и f (q) соответственно, после что f (t) и f (q) поступать на вход онтологическисемантический анализатору, который на основа использование программный кода, экспертный системы, онтологический база знание выполнять следующий действия: сопоставление синтаксема с узел структурировать онтологии; построение онтосемантический граф ont(t) и ont(q), узел который ссылаться на элемент структурировать онтологии. структурировать онтология формироваться на база загружать в система онтология и семантический словарь с помощь модуль пополнение онтологии. далее ont(q) подаваться на вход модуль формирование онтологически-семантический запрос ont(qi) к онтологии, который отправляться модуль взаимодействие с онтология и формирование общий ответа. этот модуль выполнять запрос к онтологический база знание и на база получить ответ формировать общий ответ a. пунктирный рамка на рисунок 3 обвести название язык программирование (java), экспертный система (drools [7]) онтология (рутеза [4]), семантический платформа (apache jena [8]) и язык запрос (sparql [9]), с помощь который быть программно реализовать прототип такой системы. идея использование sparql-запрос при разработка вопросно-ответный система не нова: пример такой система описываться в работа [10]. 3. соотнесение часть текст с узел онтология необходимость определение соответствие часть текст и элемент онтология возникать при решение целое ряд задача компьютерный лингвистики, связанный с автоматический обработка текст (например, при реализация система машинный перевода, автоматический аннотирование и реферирования, при разработка информационно-поисковый и вопросно-ответный систем, система разметка корпус текст и др.). при решение задача соотнесение часть текст с узел онтология можно выделить следующий этапы: — (s1) предварительный обработка текста; — (s2) определение граница предложений; — (s3) выделение граница синтаксем; — (s4) определение возможный вариант лемма для весь выделить синтаксем; — (s5) поиск в онтология элементов, соответствовать лемма из (s4); — (s6) выбор из элемент онтологии, найти в (s5), тех, который соответствовать синтаксема из (s3). первый этап – «предварительный обработка текста» мочь включать такой действие по обработка естественно-языковой текста, представить в электронный виде, как удаление символ форматирование текста, удаление лишний пробел и перенос строк, исправление опечаток, правка всевозможный машинно-определять ошибка в написание оформление текста. ниже привести наиболее известный программный реализации, выполнять некоторый задача предварительный обработка текст с указание название и вид лицензия для каждый из они или условие использование (привести в скобках). проверка правописания: — gnu aspell (lgpl ), — hunspell (gpl, lgpl, mpl), — орфо speller (коммерческая), — орфо grammar checker (коммерческая). — проверка грамматики: languagetool (lgpl), microsoft word (коммерческая). для решение второй этап «определение граница предложений» в сеть internet предлагаться множество программный реализаций, выполнять такой разбивку. однако, в основа работа большинство такой программа лежать принцип определение конец предложение по терминальный знак препинание (точка, вопросительный или восклицательный знак). такой подход к решение задача сегментация предложение привлекать свой простотой, но в реальный программный система соотнесение часть текст с узел онтология использовать он нежелательно т.к. количество ошибочно найти граница предложение при использование описать подхода, неоправданно велико. в отечественный литература проблема разбиение русскоязычный текст на предложение кратко освещаться в работа [11]. в работа [12] предлагаться метод автоматический сегментация русскоязычный текст на предложение на основа анализ контекст потенциальный граница предложений, при это потенциальный граница определяться либо посредством терминальный знаков, либо вообще с помощь весь пунктуация. при это автор не рассматривать предложения, не заканчиваться никакой знак препинания. среди наиболее известный программный реализаций, выполнять разбиение русскоязычный текст на предложения, можно выделить aot (лицензия lgpl) - как часть графематический анализ и rco (коммерческий лицензия). третий этап «выделение граница синтаксем» – однозначно, самый сложный из задач, предшествовать непосредственно решение задача соотнесение часть текст с узел онтологии. под синтаксема быть понимать единица текста, который в работа [13] определяться как минимальная, далее неделимый семантико-синтаксический единица русский языка, выступать одновременно как носитель элементарный (категориальносемантического) смысл и как конструктивный элемент более сложный синтаксический построений. от тот насколько корректно быть определить граница синтаксема в анализировать тексте, напрямую зависеть качество работа система соотнесение часть это текст с узел онтологии. для пример рассмотреть предложение «в лес у море стоить замок» (см. рис. 4). поставить задача определить соответствие часть это текст с элемент wikidata – база данных, который также можно классифицировать как онтологию, столкнуться с трудностями, связанный с определение граница синтаксем. например, в wikidata присутствовать как элемент «лес», иметь несколько различный значений, так и элемент «в лесу», характеризовать как «рассказ борис александрович лазаревского». очевидно, что в зависимость от тот как быть определить граница синтаксема в анализировать предложении, напрямую зависеть корректность соотнесение часть это предложение с элемент онтологии. после того, как в анализировать текст определить граница синтаксем, необходимо определить лемма (начальный формы) для весь синтаксема т.к. элемент онтология обычно храниться в начальный форме. здесь начинаться четвёртый этап решение задача соотнесение часть текст с элемент грамматический словарь зализняк [14]. для рассматривать в пример предложение «в лес у море стоить замок» с помощь словарь зализняк для 3 синтаксема из 6 быть определить 2 леммы: слово «лесу» соответствовать лемма «леса» и «лес», слово «моря» - лемма «море» и «морить», слово «стоит» - лемма «стоить» и «стоять». остальной синтаксема анализировать предложение употребить в формах, совпадать с они лемма (см. рис. 4). далее следовать этап поиск в онтология элементов, соответствовать леммам, найти на предыдущий этапе. для рассматривать в пример предложение для 7 лемма из 9 в онтология рутеза быть найти узел с имя этот лемм. ниже перечислить значение этот лемма (в соответствие с рутез): — лес → {[рыболовный леса]}; — лес → {[деловой древесина]; [лесна массив]; [леса (множество чего-н. поднятого)]}; — море → {[водный объект]; [мор (большой количество)]}; — морить → {[травить отравой]; [морить (мучить, изнурять)]; [морение древесины]}; — стоять → {[стоять (быть без движения)]; [стоять (бездействовать)]; [находиться, пребывать]; [стоять (сохраняться, не портиться)]; [стоять в вертикальный положении]}; — стоить → {[подобать, надлежать, следовать]; [стоить, иметь цену]}; — замок → {[замок для запирания]; [средневековый замок]}. для синтаксема «в» и «у» в онтология рутеза не найти элемент с название лемма этот синтаксем. на завершать этап требоваться из элемент онтологии, найти для весь возможный лемма каждый синтаксемы, выбрать единственный. для примера, предложения, рассматривать ранее, синтаксема «лесу» должный быть поставить в соответствие элемент онтология «лесна массив», синтаксема «моря» – элемент «водный объект», синтаксема «стоит» – элемент «находиться, пребывать», и синтаксема «замок» – элемент онтология «средневековый замок». на рисунок 4 выбрать элемент онтология рутеза выделить серый цветом. краткий обзор метод и алгоритм разрешение лексический многозначность привести в работа [15]. среди подход к разрешение лексический многозначность выделять методы, основать на использование внешний источник информация и методы, основать на машинный обучение (обычно для это использоваться семантически разметить корпуса). также применяться комбинация этот метод [16]. автор работа [17] классифицировать метод разрешение лексический многозначность по тип использовать внешний источник информации: — структурировать источник дать (машиночитаемый словари, тезаурусы, онтологии). — неструктурированный источник дать в вид корпус текст делиться на: — неразмеченный корпуса; — синтаксически и/ить семантически разметить корпуса. один из эффективный подход к решение задача соотнесение часть текст с узел онтология являться использование правил, учитывать контекст, в который употребить синтаксема, значение который требоваться определить, и информация из онтология – структурировать источник информации. быть предполагать, что этап (s1)- (s6) уже выполнить и мы работать с набор синтаксем, каждый из который поставить в соответствие множество элемент онтологии. тогда задача разрешение лексический многозначность сводиться к тому, чтобы из каждый соответствовать отдельный синтаксема множество элемент онтология выбрать один единственный, хороший образ отражать лексический значение рассматривать синтаксемы. например, для предложение «в лес у море стоить замок», задача разрешение лексический многозначность свестись к выбор единственный верный значение из множество элемент рутеза (см. таблица 1). при составление правил, определять соответствие синтаксема текст элемент онтологии, необходимо учитывать: — контекст синтаксема (близкий к синтаксема текст иметь больший значение: наиболее «важным» для анализ являться текст предложения, в который употребляться синтаксема, затем следовать текст абзаца, содержать это предложение, далее – раздел, содержать упомянуть предложение, затем – раздел более высокий уровень (например, глава или параграф) и т. д., заканчивать весь анализировать текстом) — семантический близость синтаксемы, соотнести в процесс анализ с конкретный элемент онтологии, и синтаксема из контекста, учитывать «близость» контекст к анализировать синтаксеме; для определение семантический близость можно использовать не только онтологию, но и ассоциативный словари; — тематика текста. для определение тематика текст возможно либо попросить пользователь сам определить она (например, предложить выбрать из списка), либо определить она автоматически: в настоящий время существовать множество алгоритм для автоматический рубрикация текстов. 4. пример работа система 4.1. пример 1 ниже привести пример sparql-запроса, который формироваться программнореализовать вопросно-ответный система для следующий вопрос «какий существовать вид спорта?»: select distinct ?x where {?sub0 itfru:normalform «спорт» . ?sub0 owl:sameas ?samesub0 . ?x rdfs:subclassof ?samesub0 .} привести sparql-запросу, адресовать онтология рутез, представить в формат rdf, быть соответствовать ответ, состоять из 133 элемент онтология рутез. далее перечислить первый 10 из них: бег на длинный дистанцию, скелетон, прыжок в высоту, бобслейный спорт, баскетбол, легкоатлетический марафон, стендовый стрельба, горнолыжный супергигант, метание молота, хафпайп. 4.2. пример 2 исходный текст: крупный, зеленый, добрый попугай съесть каша и яблоко, а воробей съесть груша найти семантический отношения: — что ( съел#г,изъяв,г,мр,нс,прш,съедать,ед; кашу#с,с,но,каша,жр,вн,ед ) — признак ( попугай#с,с,попугай,мр,им,од,ед; крупный#п,но,крупный,мр,им,вн,п,ед,полна ) — список ( зеленый#п,но,мр,им,вн,зеленый,п,ед,полн; добрый#п,но,мр,им,добрый,вн,п,ед,полн, ,#символ,- ,символ ) — действие ( съел#г,изъяв,г,мр,нс,прш,съедать,ед; воробей#с,с,мр,им,од,воробей,ед ) — признак ( попугай#с,с,попугай,мр,им,од,ед; добрый#п,но,мр,им,добрый,вн,п,ед,полна ) — список ( кашу#с,с,но,каша,жр,вн,ед; яблоко#с,с,но,им,яблоко,вн,ср,ед, и#союз,союз,ь ) — что ( съел#г,изъяв,г,мр,нс,прш,съедать,ед; грушу#с,с,но,груша,жр,вн,ед ) — признак ( попугай#с,с,попугай,мр,им,од,ед; зеленый#п,но,мр,им,вн,зеленый,п,ед,полна ) — список ( крупный#п,но,крупный,мр,им,вн,п,ед,полн; зеленый#п,но,мр,им,вн,зеленый,п,ед,полн, ,#символ,- ,символ ) — что ( съел#г,изъяв,г,мр,нс,прш,съедать,ед; яблоко#с,с,но,им,яблоко,вн,ср,ед ) — действие ( съел#г,изъяв,г,мр,нс,прш,съедать,ед; попугай#с,с,попугай,мр,им,од,ед ) задать вопрос: какой фрукт съесть больший птица? ответ: яблоко сгенерировать sparql запрос: select distinct ?x ?e where { ?a itfru:normalform "фрукт" . ?a owl:sameas ?b . ?x rdfs:subclassof ?b . ?x itfru:ns "new" . optional { ?x itfru:признак ?e } . ?x itfru:что_инв ?x1 . ?x1 rdfs:subclassof ?x1b . ?x1b owl:sameas ?x1s . ?x1s itfru:normalform "съедать" . ?x1 itfru:действие ?x2 . ?x2 rdfs:subclassof ?x2b . ?x2b owl:sameas ?x2s . ?x2s itfru:normalform "птица" . ?x2 itfru:признак ?x3 . ?x3 rdfs:subclassof ?x3b . ?x3b owl:sameas ?x3s . ?x3s itfru:normalform "большой" .}. 4.3. пример 3 исходный текст: большой и красный яблоко найти семантический отношения: — признак ( яблоко#с,с,но,им,яблоко,вн,ср,ед; красное#п,красный,им,вн,п,ед,полн,ср ) — список ( большое#п,им,большой,вн,п,ед,полн,ср; красное#п,красный,им,вн,п,ед,полн,ср, и#союз,союз,ь ) — признак ( яблоко#с,с,но,им,яблоко,вн,ср,ед; большое#п,им,большой,вн,п,ед,полн,ср ) задать вопрос: какой размер яблоко ? ответ: большой сгенерировать sparql запрос: select distinct ?x ?x1 where { ?a itfru:normalform "яблоко" . ?a owl:sameas ?b . ?x rdfs:subclassof ?b . ?x itfru:ns "new" . optional { ?x itfru:признак ?e } . ?x itfru:признак ?x1 . ?x1 rdfs:subclassof ?x1b . ?x1b owl:sameas ?x1s . ?x1s itfru:normalform "размер" . } 4.4. пример 4 исходный текст: слон обожать бананы, яблоки, морковь, свёкла найти семантический отношения: — список ( морковь#с,с,но,им,жр,вн,морковь,ед; свеклу#с,с,но,жр,вн,свекла,ед, ,#символ,- ,символ ) — список ( бананы#с,с,но,мн,банан,мр,им,вн; яблоки#с,с,но,мн,им,яблоко,вн,ср, ,#символ,- ,символ ) — список ( яблоки#с,с,но,мн,им,яблоко,вн,ср; морковь#с,с,но,им,жр,вн,морковь,ед, ,#символ,- ,символ ) — действие ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; бананы#с,с,но,мн,банан,мр,им,вич ) — что ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; свеклу#с,с,но,жр,вн,свекла,ед ) — что ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; бананы#с,с,но,мн,банан,мр,им,вич ) — действие ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; яблоки#с,с,но,мн,им,яблоко,вн,ср ) — что ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; морковь#с,с,но,им,жр,вн,морковь,ед ) — действие ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; слоны#с,с,мн,мр,им,слон,од ) — действие ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; свеклу#с,с,но,жр,вн,свекла,ед ) — действие ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; морковь#с,с,но,им,жр,вн,морковь,ед ) — что ( обожают#г,изъяв,св,мн,буд,г,пе,3л,обожать; яблоки#с,с,но,мн,им,яблоко,вн,ср ) задать вопрос: какой фрукт любить животные? ответ: банан, яблоко сгенерировать sparql запрос: select distinct ?x ?e where { ?a itfru:normalform "фрукт" . ?a owl:sameas ?b . ?x rdfs:subclassof ?b . ?x itfru:ns "new" . optional { ?x itfru:признак ?e } . ?x itfru:что_инв ?x1 . ?x1 rdfs:subclassof ?x1b . ?x1b owl:sameas ?x1s . ?x1s itfru:normalform "любить" . ?x itfru:действие_инв ?x1 . ?x1 rdfs:subclassof ?x1b . ?x1b owl:sameas ?x1s . ?x1s itfru:normalform "любить" . ?x1 itfru:действие ?x2 . ?x2 rdfs:subclassof ?x2b . ?x2b owl:sameas ?x2s . ?x2s itfru:normalform "животное" . } 5. заключение в настоящий время вопросно-ответный система, архитектура который описываться в дать работе, находиться в стадия разработки. в будущее планироваться провести ряд работ, направить на улучшение качество работа весь основный модуль система (морфологический анализ, выделение граница именовать сущностей, соотнесение именовать сущность с узел онтологии, поиск семантический зависимостей, поиск ответ на вопрос пользователя). также планироваться провести полноценный тестирование системы, на больший объём дать — например, на множество стать с известный новостной сайтов. подобный выбор тестовый дать весьма распространить среди разработчик систем, нацелить на извлечение информация из текстов. например, в работа [18] автор в качество анализировать корпус текст предлагать рассматривать статьи, опубликовать на известный новостной сайт cnn и daily mail — этот набор дать стать стандартный для задача понимание текстов.