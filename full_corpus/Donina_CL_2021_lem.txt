о. в. донин автоматизация выгрузка результат поиск в корпус четвёртый поколение 1. корпус четвёртый поколения: новый возможность и новый трудность т. макэнерь и э. харди быть выделить четыре поколение корпусный программный средство [mcenery et al. 2012], и хотя большинство современный инструмент корпусный лингвистика относиться они к третий поколению, корпусный система м. дэвис (https://www. english-corpora.org/) рассматриваться как инструмент четвёртый поколения, позволять работать с больший объём данных, в связь с размещение база дать на веб-сервер и предварительный индексация материала. на момент написание статья объём корпус м. дэвис варьироваться от 100 млн до 14 млрд слов, что, с один стороны, предоставлять широкий возможность для лингвистический исследований, но, с другой, обуславливать временной затрата на выгрузка результат поиск в корпусах. так, например, формулировка поисковый запрос и перенос 1000 пример выдача результат поиск из корпус в таблица формат .xls(x) для последующий лингвистический анализ занимать в средний 25 минут. учитывать объём корпусов, результат выдача мочь исчисляться сотня тысяч. наиболее простой решение дать проблемы, связанный с трудоемкостью, мочь являться ограничение материал исследование первый тысяча контекст поисковый выдачи, что, на наш взгляд, мочь привести к ограничение и наш лингвистический знания. в связь с это цель дать работа являться предложить способ автоматизация выгрузка результат поиска, который, во-первых, позволить сэкономить время исследователей, а во-вторых, дать возможность изучать лингвистический материал в весь он полноте. разработка загрузчика, необходимый для сбор дать из лингвистический корпусов, происходить на база корпус now (newspapers on the web) [davies 2016], содержать 12,2 млрд словоупотребление в двадцать государственный вариант английский язык и пополняться на 4 млн слово ежедневно. 2. способ автоматизация выгрузка поисковый запрос наиболее распространить вариант выгрузка дать с различный сайт — через api. как быть выяснить при общение с команда м. дэвиса, публичный api у они отсутствовать в связь с необходимость минимизация нагрузка на сервер. при это они поощрять создание другой исследователь полуавтоматический выгрузка запрос (но технический поддержка для это не предоставляют). в качество альтернативный вариант быть предложены: 1) приобретение групповой подписка (стоимость: 300$ за 1 год для доступ 30 человек); мы этот вариант не подходит, так как групповой подписка только увеличивать количество ежедневный запросов, но функционал оставаться прежним, доступный только ручной выгрузка; 2) приобретение ограниченный архивный версия корпус (стоимость один корпус варьироваться от 245$ до 795$); и хотя в это случай появляться возможность автоматизировать необходимый корпусный запросы, стоимость оказываться довольно высокой, и, кроме того, этот опция не предполагать получение обновлений, что неприемлемый при работа с корпус now, который обновляться каждый день. в качество альтернативный вариант быть рассмотреть возможность использование macro recorders (таких, как auto mouse clicker, easyclicks macros, tinytasks, mouse record premium, macro toolworks, mini mouse macro, ghost mouse, autohotkey), который запоминать движение мыший и нажатие клавиша клавиатура (аналогично запись макросов) и повторять их. в это случай можно быть бы вводить исследовать лингвистический единица в поле поиск вручную, а процесс копирование контекст из корпус в файл .xls(x) формат записать при помощь этот программа в вид последовательность действие и запускать этот процесс необходимый количество раз. но в связь с полуавтоматический характер это процесс и только относительный он упрощение быть принять решение отказаться от это варианта. 3. постраничный выгрузка результат поисковый запрос в итог наиболее соответствовать наш задача и материал способ автоматизация сбор информация быть признать постраничный выгрузка из корпус (по сути, web scraping, т. е. сбор дать в сети, они последующий очистка и извлечение требоваться информации). рассмотреть процесс реализация постраничный выгрузка из корпус now. подход состоять в том, чтобы запрограммировать действия, производить пользователь самостоятельно при ручной выгрузке. для это в «инструмент разработчика» браузер быть изучить запрос к сервер и получать ответы. программировать этап имитация действие пользователь при ручной выгрузка и использовать инструмент отразить на рис. 1. стоить отметить, что при реализация проект быть решить использовать универсальный мультипарадигменный скриптовый язык программирование python, что, в первый очередь, обусловить наличие большой количество библиотека для решение разнообразный задача (в тот число связанный с автоматический обработка естественный языка). далее рассмотреть имитировать этап подробнее. первый этап выступать эмуляция запрос к серверу, состоять в свой очередь из три запросов: • запрос ключ сессия (эмулировать вход пользователь на сайт), • ввод необходимый для выгрузка данных, • получение соответствовать запрос примеров. изначально для весь три запрос использоваться библиотека requests_html для работа с http, который по быть являться усовершенствовать версия разработать ранее для аналогичный цель библиотека urllib2. библиотека requests_html позволять выполнять запрос к серверу, обрабатывать он ответ и выгружать содержимое веб-страница для последующий парсинга в вид html. но при использование дать библиотека возникнуть проблема, заключаться в том, что сервер возвращать дать в формате, отличный от того, что есть на сайте. быть принять решение использовать беззаголовочный браузер pyppeteer (headless chrome browser automation library), способный эмулировать работа браузера. до недавний время для решение подобный задача требоваться прибегать к использование такой проектов, как phantomjs. с появление беззаголовочный браузер появиться возможность визуализировать и анализировать веб-страница без использование пользовательский интерфейс (ui — user interface), получать тот же результат, что и в традиционный режим с ui. пионер в область автоматизация действие веб-браузер и удалённый управление браузер считаться инструмент selenium, разработать на java. pyppeteer же, позволять управлять браузер из код python с помощь относительно простой и высокоуровневый api, можно рассматривать как современный альтернатива использование традиционный selenium. pyppeteer позволять получить практически полный контроль над браузер chrome, в тот число открывать вкладки, в реальный время анализировать объектный модель документ (dom), выполнять javascript и многое другое. в связь с тем, что в рамка решение наш задача не быть очевидно, на какой именно запрос возникать проблемы, мы пробовать использовать данный библиотека для весь три запросов. опытный путём быть показано, что возникать проблема связать с первый запросом. такой образом, в итоговый версия код для получение ключ сессия (т. е. при первый запросе) теперь использоваться беззаголовочный браузер pyppeteer, а для второй и третий запрос продолжать применяться библиотека requests_html (из-за простота использования). на второй этап для извлечение требоваться дать с вебстраница использоваться библиотека для xml/html-парсинга beautifulsoup, которая, согласно информация разработчиков, способный преобразовывать даже неправильный разметка (tag soup), откуда и получить свой название (с этот точка зрение beautifulsoup считаться надежнее, чем она более оперативно работать аналог lxml). несмотря на то, что, согласно документации, библиотека beautifulsoup способный определять местоположение закрываться тег даже при они отсутствии, в процесс работа у мы возникнуть именно такой проблема: тег font открывался, но не закрывался. в связь с этим, чтобы убрать невалидный элемент html, который мешать парсинга beautifulsoup, мы использовать регулярный выражения, удалить всё тег font. на последний этап для выгрузка дать в формат .xls(x) мы воспользоваться библиотека для обработка и моделирование дать — pandas. несмотря на то, что дать библиотека предоставлять множество способ анализ дать (в тот числе: группировка, создание сводный таблиц, визуализация при помощь график (переть наличие matplotlib) и многое другое), для решение наш задача быть актуальный возможность чтение и запись весь самый распространить формат дать (например, файл .xls(x), html, sql, .txt и пр.), а также наличие объект табличный структура дать dataframe, т. е. проиндексировать многомерный массив значений. 4. результат в результат выполнение данный код мы получать файл формат .xls(x) (рис. 2), содержать данные, аналогичный результатам, отражаться в вкладка context корпус now, но в табличный формате, позволять проводить дальнейший лингвистический анализ. возможность выдача корпус в выгружать мы формат ограничить контекст из 30 слово в избежание нарушение авторский прав. стоить отметить масштабируемость данный подхода, который мы в дальнейший планировать применять для остальной корпус марк дэвиса, с который мы работать (coca, glowbe, iweb).