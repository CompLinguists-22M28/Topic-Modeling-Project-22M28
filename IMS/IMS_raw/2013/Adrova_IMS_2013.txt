Исследование алгоритмов хеширования, используемых
для аутентификации в Web-приложениях
Л.С. Адрова, П.Н. Полежаев
Оренбургский государственный университет
1. Проблема хранения пароля
пользователя в Web-приложении
В настоящее время широкое распространение
получили различные интернет-сервисы, поэтому
пользователи стали чаще задумываться о безопасности при работе в глобальной сети. Основной способ аутентификации в Web-приложении — использование логина и пароля, которые обычно хранятся
в некоторой базе данных приложения. Зачастую они
хранятся в открытом виде (даже на очень популярных сайтах), что облегчает работу злоумышленников по их получению с помощью SQL-инъекций и
последующей аутентификации на сайте. Примером
систем управления содержимым (Content Management System, CMS), хранящих пароль в открытом
виде, служат Aqua CMS, jasP и Liferay.
Один из вариантов хранения пароля в базе данных приложения — использование хешированного
пароля. Например, в 1C Битрикс, Drupal 6.15 и PHPNuke используются результаты применения алгоритма md5 к паролю. Radiant использует хеширование по схеме sha1(sha1(password)). В данном случае
труднее получить исходный пароль, однако для его
восстановления могут быть использованы радужные
таблицы, содержащие миллиарды пар «пароль –
результат хеширования». Радужные таблицы доступны в интернете и составлены для всех словарных
паролей. Радужные таблицы могут достигать гигантских размеров, но вычисление исходного пароля будет зависеть только от времени поиска по ним.
Ярким примером служит утечка 6,5 миллионов
паролей из баз данных социальной сети LinkedIn.
Алгоритм хеширования паролей SHA-1, используемый без соли позволил злоумышленникам за шесть
дней получить доступ к 90% паролей социальной
сети [5].
Кроме того, в последние годы возросла вычислительная мощность GPU, они способны вычислять
миллиарды хешей в секунду. Поэтому в настоящее
время даже длинные пароли не могут считаться
безопасными.
Для решения данной проблемы необходимо использовать соль, причем уникальную для каждого
пользователя. Использование общей соли для всех
пользователей сайта позволяет сгенерировать единую радужную таблицу, а затем ее применить к записям всех пользователей для получения паролей.
Неэффективность данного приема можно увидеть на примере хеширования паролей в CMS eFront
3.6.4, которая добавляет к алгоритму хеширования
md5 соль, единую для всех пользователей:
md5(password.'cDWQR#$Rcxsc').
В случае уникальной соли — генерация паролей
бессмысленна, в этом случае единственный способ
— брутфорс (перебор паролей по словарю или полный перебор символов из набора) с последующим
их хешированием с уникальной солью и сравнением
с украденным хеш-значением. Примером такого
использование соли может служить алгоритм хеширования Joomla — md5(password.salt).
Чтобы предотвратить взлом паролей нужно использовать медленные хеш-функции или увеличить
число раундов для быстрых хеш-функций. Одним из
примеров использования увеличения числа раундов
хеш-функции может служить алгоритм хеширования CMS IPB 1.3-2.17 и MyBB 1.2.x: md5(md5(salt).
md5(password)).
Целью настоящей работы является исследование
применительно к аутентификации в Web-приложениях различных алгоритмов хеширования,
разработка рекомендаций по их использованию.
2. Исследование различных алгоритмов
хеширования
2.1. Анализ времени работы стандартных
алгоритмов хеширования
Для исследования были взяты наиболее популярные алгоритмы хеширования: MD5, SHA512,
RIPEMD320, WHIRPOOL, TIGER и GOST. Часть из
них входит в стандартную библиотеку .NET, другие
в открытую библиотеку CryptSharp [3]. В результате
исследования была определена зависимость времени их выполнения (в мс) от размера пароля (см. рисунок 1). Длина пароля варьируется от 2 до 20 символов. Время выполнения алгоритмов практически
идентично, единственно из общего ряда выбивается
алгоритм GOST. Время хеширования этого алгоритма достигает 0,046-0,047 мс. Но в целом время
хеширования слишком мало, чтобы противостоять
атаке брутфорса.
2.2. Анализ времени работы алгоритмов
хеширования BCRYPT и SCRYPT
Большее время хеширования обеспечивают алгоритмы BCRYPT [1] и SCRYPT [2]. В результате
исследования также была определена зависимость
времени выполнения данных алгоритмов (в мс) от
размера пароля по сравнению с выше перечисленными алгоритмами хеширования (MD5, SHA512,
RIPEMD320, WHIRPOOL, TIGER, GOST) (см. рисунок 2). Это две достаточно медленные хешфункции. Алгоритм хеширования BCRYPT использует соль для защиты от радужных таблиц. Однако
BCRYPT был разработан в 1999 году, поэтому он
защищен от перебора на компьютерах того времени.
Сейчас появились ПЛИС, которые ускоряют выполнение BCRYPT для брутфорса.
В 2009 году был создан алгоритм SCRYPT, который работает медленнее и требует значительный
объем памяти, что является дополнительным достоинством. Алгоритм SCRYPT использует память со
случайным доступом, ее объём может настраиваться.
У обоих алгоритмов настраивается стоимость
хеширования (количество внутренних раундов), у
SCRYPT можно дополнительно изменять размер
блока, что позволяет увеличивать время хеширования паролей.
Данные алгоритмы были реализованы на языке
C#, исследовалась зависимость времени выполнения SCRYPT от стоимости и размера блока,
BCRYPT – от размера блока. Усредненные значения
времени в результате повторения замера 100 раз
приведены в таблице 1.
Если принять в качестве предельного времени
аутентификации 250 мс, то наиболее близкие к нему
значения в 247,46 и 243,50 мс обеспечиваются алгоритмом SCRYPT при соответствующих значения
(27, 28) и (28, 27) (первое число — стоимость, второе
— размер блока). У BCRYPT это значение намного
ниже, порядка 167,95 мс, что значительно быстрее
и, следовательно, уровень безопасности хеширования понижается.
2.3. Исследование алгоритмов хеширования в
зависимости от числа используемых раундов
Второй подход к борьбе с полным перебором
паролей – увеличение числа раундов. В данном случае алгоритмы BCRYPT и SCRYPT не подходят, так
как не рекомендуется добавление дополнительных
внешних раундов. В ходе сравнительного анализа
алгоритмов хеширования по критерию устойчивости к известным атакам обращения, нахождения
коллизии, определения второго прообраза, выяснилось, что среди рассматриваемых алгоритмов хеширования наибольшей стойкостью обладают GOST и
SHA512. Поэтому они и были выбрано для дальнейшего рассмотрения.
Рисунок 3 иллюстрирует зависимость времени
работы алгоритма GOST от числа раундов, которая
имеет линейный характер, рисунок 4 — аналогичную зависимость для алгоритма SHA512.
Максимальное допустимое время аутентификации достигается при ~4695 раундах. Аналогично
для более быстрого алгоритма SHA512 было получено значение в ~15650 раундов.
Расчеты показывают, что при максимальном
числе раундов для данных алгоритмов и максимальном времени аутентификации в 250 мс перебор
100000 наиболее распространённых словарных паролей займет приблизительно 7 часов. Это лишний
раз подтверждает необходимость использования
сложных, близких к случайным паролей.
Полный перебор алфавитно-цифровых паролей
средней длины от 6 до 8 символов займет около
880000 дней, что достаточно велико. Однако мощный суперкомпьютер с 1000 ядрами справится с
этой задачей за 2.5 года.
Возникает вопрос – как влияет увеличение количества раундов на криптостойкость функции хеширования? Проведя математические расчеты [4],
можно показать, что сужение выходного множества
после выполнения i раундов может быть определено
из следующей рекуррентной формулы:

Значение сужения может быть переведено в биты с помощью функции:
где — число, показывающее во сколько раз
сократилось выходное множество (в битах). На рисунке 5 приведен график зависимости r до 50000
итераций.
Данный график показывает медленный рост
снижения криптостойкости с ростом числа раундов.
3. Результаты исследования
В результате проведенного исследования получены следующие выводы:
 важно использовать при хешировании паролей
уникальную соль для защиты от радужных таблиц;
 необходимо увеличивать время хеширования,
для защиты от перебора, в данном случае мы
отдаем преимущество функции хеширования —
SCRYPT. Данный алгоритм достаточно новый,
имеет настраиваемый объем памяти для хеширования, а также это очень медленный алгоритм, что является важным параметром в хешировании. Оптимальное значение пар (раунды,
размер блока) для SCRYPT: (27, 28) и (28, 27);
 оптимальное количество раундов для GOST-
4695, для SHA512 — 15650, что приводит к сужению выходного множества соответственно на
12 и 13 бит, что незначительно при его размере
в 256 и 512 бит соответственно;
 современные методы аутентификации по паролю защищены от полного перебора, но не от
атаки по словарю. Очень важно, чтобы пользователи создавали случайные пароли длиной от 8
символов и более, так как время перебора по
словарю паролей такой длины достаточно велико;
 на основе проведенного исследования, мы рекомендуем использовать SCRYPT с заданными
параметрами или GOST/SHA512 с вычисленным числом раундов для большей защищенности Web-приложений от взлома паролей.