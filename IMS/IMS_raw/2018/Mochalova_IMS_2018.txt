Программная реализация на базе платформы Apache Jena
вопросно-ответной системы, использующей данные
онтологий
А.В. Мочалова, В.А. Мочалов
Институт космофизических исследований и распространения радиоволн ДВО РАН
stark345@gmail.com, sensorlife@mail.ru

1. Введение
1.1. Общая схема работы вопросно-ответной системы
На основе анализа существующих разработок вопросно-ответных систем, можно
сделать вывод о том, что качественная система ответа на вопрос функционирует в
соответствии с определенной схемой, представленной на рисунке 1. На вход системе
подается вопрос, сформулированный на естественном языке. Затем текст вопроса
проходит автоматическую обработку, основные этапы которой следующие:
предварительная обработка текста (включает в себя удаление лишних символов
форматирования, исправление орфографических и пунктуационных ошибок, удаление
лишних пробелов и символов переноса строк и т.п.); извлечение именованных сущностей;
разбиение текста на предложения; токенизация (разбиение предложений на слова);
морфологический, синтаксический и семантический анализ. Модуль автоматического
анализа текста, как правило использует различные структурированные лингвистические
ресурсы: словари, базы данных, базы фактов, онтологии. В некоторых вопросно-ответных
системах часть из вышеперечисленных этапов автоматической обработки текстов может
быть пропущена или выполняться в упрощенном виде, а часть наоборот --- являться
Сборник научных статей Международной объединенной конференции «Интернет и
современное общество», IMS.

основополагающими для работы всей системы, как, например, семантический анализ в
работе М.В. Мозгового [1]. Затем текст вопроса классифицируется в соответствии с
принятой в данной системе классификацией. На базе результатов автоматической
обработки текста вопроса и результатов классификации вопроса формируется запрос,
который передается поисковой машине.


Далее поисковая машина выбирает определенное количество документов (если поиск
производится не по одному заданному документу), наиболее релевантных запросу. Выбор
документов может производиться с помощью внешних поисковых систем, либо с
помощью собственной поисковой машины, являющейся частью разрабатываемой
системы. В некоторых случаях поиск документов производится в ограниченной
специализированной коллекции документов, которой располагает система. Эффективный
подход к организации поисковой системы предложен в работе [2], где предлагается
архитектура субпоисковой системы, которая формирует собственную базу документов и
собственный поисковый индекс, а для ускорения процесса сбора потенциально
интересующих документов использует внешние поисковые системы (Google, Яндекс,
Bing). На рисунке 2 представленна диаграмма соотношений множеств документов в такой
субпоисковой системе (I --- множество документов, доступных в сети интернет, W --множество документов, отобранных Интернет поисковой системой, S --- множество
документов, отобранных субпоисковой системой).


Текст каждого из выбранных документов, также как и текст вопроса, подвергается
автоматической обработке. При этом алгоритмы машинной обработки текста вопроса
могут отличаться от алгоритмов машинной обработки набора документов, выбранных
поисковой системой. Далее, посредством внутренних алгоритмов работы вопросноответной системы, происходит выбор конкретных фрагментов текстов из документов,
переданных поисковой системой. Выбранные фрагменты текста представляются системой

в качестве ответа. Наиболее продвинутые вопросно-ответные системы на этапе выбора
фрагментов текста могут использовать данные из структурированных лингвистических
ресурсов. Информация из этих лингвистических ресурсов может дополнять ответ/ответы
системы.
В связи с тем, что результаты машинной обработки текста передаются модулям
вопросно-ответной системы, от которых напрямую зависит ответ системы на вопрос,
можно сделать вывод, что задача автоматической обработки текста является одной из
важнейших задач, решаемых в рамках работы вопросно-ответной системы и от
корректности работы модуля обработки текста напрямую зависит корректность работы
всей системы.
1.2. Применение тезаурусов при разработке вопросно-ответных систем
Одно из пониманий тезауруса подразумевает словарь, с максимальной полнотой
представлявший лексику языка во всей ее полноте с примерами употребления в текстах.
Однако с точки зрения применения тезауруса в вопросно-ответной системе его следует
понимать как информационно-поисковый тезаурус, как словарь общей или чаще
специальной лексики, в котором в явном виде указаны семантические отношения между
лексическими единицами (синонимия, антонимия, гипонимия, гиперонимия и т.п.).
Многие прочие отношения часто объединяются в общий класс ассоциативных отношений.
В отличие от толкового словаря, тезаурус позволяет выявлять смысл не с только с
помощью определения, но и посредством соотнесения слова с другими понятиями и их
группами. Тезаурус - это терминологический ресурс, реализованный в виде словаря
понятий и терминов со связями между ними. Основное его назначение - помощь при
информационном поиске: на основе связей тезауруса происходит расширение запроса,
навигация по связям тезауруса помогает четче сформулировать сам запрос.[3]
Качество работы вопросно-ответной системы напрямую зависит от качества и объема
используемых тезаурусов. Использоваться они могут на разных уровнях реализации такой
системы, например, при определении границ синтаксем, выделении именованных
сущностей, в модуле, выполняющем семантический анализ текста, а также
непосредственно в алгоритмах поиска ответа на вопрос в анализируемом тексте.
Следует отметить, что в широком понимании онтологии тезаурусы тоже являются
онтологиями.
В этой работе описывается вопросно-ответная система, использующая данные из
известного лингвистического ресурса – тезауруса РуТез [4], хранящего данные в
структурированном виде. Описывается использование РуТез для выделения именованных
сущностей в тексте, показывается как с помощью SPARQL-запросов и
онтосемантического
анализатора,
используемого
вопросно-ответной
системой,
формируется ответы на заданные пользователями вопросы.

2. Архитектура вопросно-ответной системы на базе платформы Apache
Jena
В настоящее время весьма актуальной задачей является разработка вопросно-ответных
систем, позволяющих отвечать на вопросы пользователей, заданные на естественном
языке по машиночитаемым текстам на естественном языке. Эта работа посвящена
описанию архитектуры вопросно-ответной системы, основанной на базе платформы
Apache Jena и использующей данные из онтологии.
На рисунке 3 приводится обобщенная архитектура вопросно-ответной системы [5],
основанная на использовании семантического анализатора, построенного по
математической модели, описанной в работе [6]. На вход вопросно-ответной системе
подается вопрос Q на естественном языке и пользовательский текст T , выбранный

пользователем для поиска ответа на вопрос Q. Текст T и вопрос Q поступают на вход
модуля начальной обработки текста, в котором происходит выполнение следующих
шагов: предварительная обработка, токенизация, морфологический анализ, выделение
неделимых смысловых единиц. Результаты начальной обработки T и Q записываются в F
(T) и F (Q) соответственно, после чего F (T) и F (Q) поступают на вход онтологическисемантическому анализатору, который на основе использования программного кода,
экспертной системы, онтологической базы знаний выполняет следующие действия:
сопоставление синтаксем с узлами структурированной онтологии; построение
онтосемантических графов Ont(T) и Ont(Q), узлы которого ссылаются на элементы
структурированной онтологии. Структурированная онтология формируется на базе
загружаемых в систему онтологий и семантических словарей с помощью модуля
пополнения онтологии. Далее Ont(Q) подается на вход модуля формирования
онтологически-семантических запросов Ont(qi) к онтологии, которые отправляются
модулю взаимодействия с онтологией и формирования общего ответа. Этот модуль
выполняет запросы к онтологической базе знаний и на базе полученных ответов
формирует общий ответ A.



Пунктирной рамкой на рисунке 3 обведены названия языка программирования (Java),
экспертной системы (Drools [7]) онтологии (РуТез [4]), семантической платформы (Apache
Jena [8]) и языка запросов (SPARQL [9]), с помощью которых был программно реализован
прототип такой системы.
Идея использования SPARQL-запросов при разработке вопросно-ответных систем не
нова: пример такой системы описывается в работе [10].

3. Соотнесение частей текста с узлами онтологии
Необходимость определения соответствия частей текста и элементов онтологии
возникает при решении целого ряда задач компьютерной лингвистики, связанных с

автоматической обработкой текста (например, при реализации систем машинного
перевода, автоматического аннотирования и реферирования, при разработке
информационно-поисковых и вопросно-ответных систем, систем разметки корпусов
текста и др.).
При решении задачи соотнесения частей текста с узлами онтологии можно выделить
следующие этапы:
— (s1) Предварительная обработка текста;
— (s2) Определение границ предложений;
— (s3) Выделение границ синтаксем;
— (s4) Определение возможных вариантов лемм для всех выделенных синтаксем;
— (s5) Поиск в онтологии элементов, соответствующих леммам из (s4);
— (s6) Выбор из элементов онтологии, найденных в (s5), тех, которые соответствуют
синтаксемам из (s3).
Первый этап – «Предварительная обработка текста» может включать такие действия по
обработки естественно-языкового текста, представленного в электронном виде, как
удаление символов форматирования текста, удаление лишних пробелов и переносов строк,
исправление опечаток, правка всевозможных машинно-определяемых ошибок в написании
оформлении текста.
Ниже приведены наиболее известные программные реализации, выполняющие
некоторые задачи предварительной обработки текстов с указанием названия и вида
лицензии для каждой из них или условий использования (приведено в скобках).
Проверка правописания:
— GNU Aspell (LGPL ),
— Hunspell (GPL, LGPL, MPL),
— ОРФО Speller (Коммерческая),
— ОРФО Grammar Checker (Коммерческая).
— Проверка грамматики: LanguageTool (LGPL), Microsoft Word (Коммерческая).
Для решения второго этапа «Определение границ предложений» в сети Internet
предлагается множество программных реализаций, выполняющих такую разбивку.
Однако, в основе работы большинства таких программ лежит принцип определение конца
предложения по терминальному знаку препинания (точка, вопросительный или
восклицательный знак). Такой подход к решению задачи сегментации предложений
привлекает своей простотой, но в реальной программной системе соотнесения частей
текста с узлами онтологии использовать его нежелательно т.к. количество ошибочно
найденных границ предложения при использовании описанного подхода, неоправданно
велико.
В отечественной литературе проблема разбиения русскоязычного текста на
предложения кратко освещается в работе [11]. В работе [12] предлагается метод
автоматической сегментации русскоязычного текста на предложения на основе анализа
контекста потенциальных границ предложений, при этом потенциальные границы
определяются либо посредством терминальных знаков, либо вообще с помощью всей
пунктуация. При этом авторы не рассматривают предложения, не заканчивающиеся
никаким знаком препинания.
Среди наиболее известных программных реализаций, выполняющих разбиение
русскоязычного текста на предложения, можно выделить Aot (лицензия LGPL) - как часть
графематического анализа и RCO (коммерческая лицензия).
Третий этап «Выделение границ синтаксем» – однозначно, самая сложная из задач,
предшествующих непосредственно решению задачи соотнесения частей текста с узлами
онтологии. Под синтаксемой будем понимать единицу текста, которая в работе [13]
определяется как минимальная, далее неделимая семантико-синтаксическая единица
русского языка, выступающая одновременно как носитель элементарного (категориальносемантического) смысла и как конструктивный элемент более сложных синтаксических

построений. От того насколько корректно будут определены границы синтаксем в
анализируемом тексте, напрямую зависит качество работы системы соотнесения частей
этого текста с узлами онтологии.
Для примера рассмотрим предложение «В лесу у моря стоит замок» (см. рис. 4).
Поставив задачей определить соответствие частей этого текста с элементами Wikidata –
базы данных, которую также можно классифицировать как онтологию, столкнемся с
трудностями, связанными с определением границ синтаксем. Например, в Wikidata
присутствует как элемент «лес», имеющий несколько различных значений, так и элемент
«В лесу», характеризуемого как «рассказ Бориса Александровича Лазаревского».
Очевидно, что в зависимости от того как будут определены границы синтаксем в
анализируемом предложении, напрямую зависит корректность соотнесения частей этого
предложения с элементами онтологии.
После того, как в анализируемом тексте определены границы синтаксем, необходимо
определить леммы (начальные формы) для всех синтаксем т.к. элементы онтологии
обычно хранятся в начальной форме. Здесь начинается четвертый этап решения задачи
соотнесения частей текста с элементами грамматический словарь Зализняка [14]. Для
рассматриваемого в примере предложения «В лесу у моря стоит замок» с помощь словаря
Зализняка для 3 синтаксем из 6 будут определены 2 леммы: слову «лесу» соответствуют
леммы «леса» и «лес», слову «моря» - леммы «море» и «морить», слову «стоит» - леммы
«стоить» и «стоять». Остальные синтаксемы анализируемого предложения употреблены в
формах, совпадающих с их леммами (см. рис. 4).
Далее следует этап поиск в онтологии элементов, соответствующих леммам,
найденным на предыдущем этапе. Для рассматриваемого в примере предложения для 7
лемм из 9 в онтологии РуТез будут найдены узлы с именами этих лемм. Ниже
перечислены значения этих лемм (в соответствии с РуТез):
— Леса → {[рыболовная леса]};
— Лес → {[деловая древесина]; [лесной массив]; [лес (множество чего-н.
поднятого)]};
— Море → {[водный объект]; [море (большое количество)]};
— Морить → {[травить отравой]; [морить (мучить, изнурять)]; [морение древесины]};
— Стоять → {[стоять (быть без движения)]; [стоять (бездействовать)]; [находиться,
пребывать]; [стоять (сохраняться, не портиться)]; [стоять в вертикальном
положении]};
— Стоить → {[подобать, надлежать, следовать]; [стоить, иметь цену]};
— Замок → {[замок для запирания]; [средневековый замок]}.
Для синтаксем «в» и «у» в онтологии РуТез не найдено элементов с названиями лемм
этих синтаксем.
На завершающем этапе требуется из элементов онтологии, найденных для всех
возможных лемм каждой синтаксемы, выбрать единственный. Для примера, предложения,
рассматриваемого ранее, синтаксеме «лесу» должен быть поставлен в соответствие
элемент онтологии «лесной массив», синтаксеме «моря» – элемент «водный объект»,
синтаксеме «стоит» – элемент «находиться, пребывать», и синтаксеме «замок» – элемент
онтологии «средневековый замок». На рисунке 4 выбранные элементы онтологии РуТез
выделены серым цветом.

Краткий обзор методов и алгоритмов разрешения лексической многозначности
приведен в работе [15]. Среди подходов к разрешению лексической многозначности
выделяют методы, основанные на использовании внешних источников информации и
методы, основанные на машинном обучении (обычно для этого используются
семантически размеченные корпуса). Также применяются комбинации этих методов [16].
Автор работы [17] классифицирует методы разрешения лексической многозначности по
типу используемых внешних источников информации:
— структурированные источники данных (машиночитаемые словари, тезаурусы,
онтологии).
— неструктурированные источники данных в виде корпусов текстов делятся на:
— неразмеченные корпуса;
— синтаксически и/или семантически размеченные корпуса.
Одним из эффективных подходов к решению задачи соотнесения частей текста с
узлами онтологии является использование правил, учитывающих контекст, в котором
употреблена синтаксема, значение которой требуется определить, и информацию из
онтологий – структурированных источников информации.

Будем предполагать, что этапы (s1)- (s6) уже выполнены и мы работаем с набором
синтаксем, каждой из которых поставлено в соответствие множество элементов
онтологии. Тогда задача разрешения лексической многозначности сводится к тому, чтобы
из каждого соответствующего отдельной синтаксеме множества элементов онтологии
выбрать один единственный, наилучшим образом отражающий лексическое значение
рассматриваемой синтаксемы. Например, для предложения «В лесу у моря стоит замок»,
задача разрешения лексической многозначности сведется к выбору единственного верного
значения из множества элементов РуТез (см. Таблицу 1).


При составлении правил, определяющих соответствие синтаксемы текста элементу
онтологии, необходимо учитывать:
— Контекст синтаксемы (ближайший к синтаксеме текст имеет наибольшее значение:
наиболее «важным» для анализа является текст предложения, в котором
употребляется синтаксема, затем следует текст абзаца, содержащего это
предложение, далее – раздел, содержащий упомянутое предложение, затем –

раздел более высокого уровня (например, глава или параграф) и т. д., заканчивая
всем анализируемым текстом)
— Семантическую близость синтаксемы, соотнесенную в процессе анализа с
конкретным элементом онтологии, и синтаксем из контекста, учитывая «близость»
контекста к анализируемой синтаксеме; для определения семантической близости
можно использовать не только онтологию, но и ассоциативные словари;
— Тематику текста. Для определения тематики текста возможно либо попросить
пользователя самого определить ее (например, предложив выбрать из списка), либо
определить ее автоматически: в настоящее время существует множество
алгоритмов для автоматической рубрикации текстов.

4. Примеры работы системы
4.1. Пример 1
Ниже приведен пример SPARQL-запроса, который формируется программнореализованной вопросно-ответной системой для следующего вопроса «Какие существуют
виды спорта?»:
SELECT DISTINCT ?x WHERE {?sub0 itfru:normalForm «спорт» .
?sub0 owl:sameAs ?samesub0 . ?x rdfs:subClassOf ?samesub0 .}
Приведенному SPARQL-запросу, адресованный онтологии РуТез, представленной в
формате RDF, будет соответствовать ответ, состоящий из 133 элементов онтологии РуТез.
Далее перечислены первые 10 из них: бег на длинную дистанцию, скелетон, прыжки в
высоту, бобслейный спорт, баскетбол, легкоатлетический марафон, стендовая стрельба,
горнолыжный супергигант, метание молота, хафпайп.
4.2. Пример 2
Исходный текст: Крупный, зеленый, добрый попугай съел кашу и яблоко, а воробей
съел грушу
Найденные семантические отношения:
— ЧТО ( съел#Г,изъяв,Г,мр,нс,прш,съедать,ед; кашу#С,С,но,каша,жр,вн,ед )
— ПРИЗНАК ( попугай#С,С,попугай,мр,им,од,ед;
Крупный#П,но,крупный,мр,им,вн,П,ед,полн )
— СПИСОК ( зеленый#П,но,мр,им,вн,зеленый,П,ед,полн;
добрый#П,но,мр,им,добрый,вн,П,ед,полн, ,#СИМВОЛ,- ,СИМВОЛ )
— ДЕЙСТВИЕ ( съел#Г,изъяв,Г,мр,нс,прш,съедать,ед;
воробей#С,С,мр,им,од,воробей,ед )
— ПРИЗНАК ( попугай#С,С,попугай,мр,им,од,ед;
добрый#П,но,мр,им,добрый,вн,П,ед,полн )
— СПИСОК ( кашу#С,С,но,каша,жр,вн,ед; яблоко#С,С,но,им,яблоко,вн,ср,ед,
и#СОЮЗ,СОЮЗ,и )
— ЧТО ( съел#Г,изъяв,Г,мр,нс,прш,съедать,ед; грушу#С,С,но,груша,жр,вн,ед )
— ПРИЗНАК ( попугай#С,С,попугай,мр,им,од,ед;
зеленый#П,но,мр,им,вн,зеленый,П,ед,полн )
— СПИСОК ( Крупный#П,но,крупный,мр,им,вн,П,ед,полн;
зеленый#П,но,мр,им,вн,зеленый,П,ед,полн, ,#СИМВОЛ,- ,СИМВОЛ )
— ЧТО ( съел#Г,изъяв,Г,мр,нс,прш,съедать,ед; яблоко#С,С,но,им,яблоко,вн,ср,ед )
— ДЕЙСТВИЕ ( съел#Г,изъяв,Г,мр,нс,прш,съедать,ед;
попугай#С,С,попугай,мр,им,од,ед )
Заданный вопрос: Какой фрукт съела большая птица?
Ответ: Яблоко

Сгенерированный SPARQL запрос:
SELECT DISTINCT ?x ?e WHERE { ?a itfru:normalForm "фрукт" . ?a owl:sameAs ?b . ?x
rdfs:subClassOf ?b . ?x itfru:ns "NEW" . OPTIONAL { ?x itfru:ПРИЗНАК ?e } . ?x
itfru:ЧТО_ИНВ ?x1 . ?x1 rdfs:subClassOf ?x1b . ?x1b owl:sameAs ?x1S . ?x1S
itfru:normalForm "съедать" . ?x1 itfru:ДЕЙСТВИЕ ?x2 . ?x2 rdfs:subClassOf ?x2b . ?x2b
owl:sameAs ?x2S . ?x2S itfru:normalForm "птица" . ?x2 itfru:ПРИЗНАК ?x3 . ?x3
rdfs:subClassOf ?x3b . ?x3b owl:sameAs ?x3S . ?x3S itfru:normalForm "большой" .}.
4.3. Пример 3
Исходный текст: Большое и красное яблоко
Найденные семантические отношения:
— ПРИЗНАК ( яблоко#С,С,но,им,яблоко,вн,ср,ед;
красное#П,красный,им,вн,П,ед,полн,ср )
— СПИСОК ( Большое#П,им,большой,вн,П,ед,полн,ср;
красное#П,красный,им,вн,П,ед,полн,ср, и#СОЮЗ,СОЮЗ,и )
— ПРИЗНАК ( яблоко#С,С,но,им,яблоко,вн,ср,ед;
Большое#П,им,большой,вн,П,ед,полн,ср )
Заданный вопрос: Какого размера яблоко ?
Ответ: большое
Сгенерированный SPARQL запрос:
SELECT DISTINCT ?x ?x1 WHERE { ?a itfru:normalForm "яблоко" . ?a owl:sameAs ?b .
?x rdfs:subClassOf ?b . ?x itfru:ns "NEW" . OPTIONAL { ?x itfru:ПРИЗНАК ?e } . ?x
itfru:ПРИЗНАК ?x1 . ?x1 rdfs:subClassOf
?x1b . ?x1b owl:sameAs ?x1S . ?x1S
itfru:normalForm "размер" . }
4.4. Пример 4
Исходный текст: Слоны обожают бананы, яблоки, морковь, свеклу
Найденные семантические отношения:
— СПИСОК ( морковь#С,С,но,им,жр,вн,морковь,ед; свеклу#С,С,но,жр,вн,свекла,ед,
,#СИМВОЛ,- ,СИМВОЛ )
— СПИСОК ( бананы#С,С,но,мн,банан,мр,им,вн; яблоки#С,С,но,мн,им,яблоко,вн,ср,
,#СИМВОЛ,- ,СИМВОЛ )
— СПИСОК ( яблоки#С,С,но,мн,им,яблоко,вн,ср;
морковь#С,С,но,им,жр,вн,морковь,ед, ,#СИМВОЛ,- ,СИМВОЛ )
— ДЕЙСТВИЕ ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
бананы#С,С,но,мн,банан,мр,им,вн )
— ЧТО ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать; свеклу#С,С,но,жр,вн,свекла,ед
)
— ЧТО ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
бананы#С,С,но,мн,банан,мр,им,вн )
— ДЕЙСТВИЕ ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
яблоки#С,С,но,мн,им,яблоко,вн,ср )
— ЧТО ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
морковь#С,С,но,им,жр,вн,морковь,ед )
— ДЕЙСТВИЕ ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
Слоны#С,С,мн,мр,им,слон,од )
— ДЕЙСТВИЕ ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
свеклу#С,С,но,жр,вн,свекла,ед )
— ДЕЙСТВИЕ ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
морковь#С,С,но,им,жр,вн,морковь,ед )

—

ЧТО ( обожают#Г,изъяв,св,мн,буд,Г,пе,3л,обожать;
яблоки#С,С,но,мн,им,яблоко,вн,ср )
Заданный вопрос: Какие фрукты любят животные?
Ответ: банан, яблоко
Сгенерированный SPARQL запрос:
SELECT DISTINCT ?x ?e WHERE { ?a itfru:normalForm "фрукт" . ?a owl:sameAs ?b . ?x
rdfs:subClassOf ?b . ?x itfru:ns "NEW" . OPTIONAL { ?x itfru:ПРИЗНАК ?e } . ?x
itfru:ЧТО_ИНВ ?x1 . ?x1 rdfs:subClassOf ?x1b . ?x1b owl:sameAs ?x1S . ?x1S
itfru:normalForm "любить" . ?x itfru:ДЕЙСТВИЕ_ИНВ ?x1 . ?x1 rdfs:subClassOf ?x1b . ?x1b
owl:sameAs ?x1S . ?x1S itfru:normalForm "любить" . ?x1 itfru:ДЕЙСТВИЕ ?x2 . ?x2
rdfs:subClassOf ?x2b . ?x2b owl:sameAs ?x2S . ?x2S itfru:normalForm "животное" . }

5. Заключение
В настоящее время вопросно-ответная система, архитектура которой описывается в
данной работе, находится в стадии разработки. В будущем планируется провести ряд
работ, направленных на улучшение качества работы всех основных модулей системы
(морфологический анализ, выделение границ именованных сущностей, соотнесение
именованных сущностей с узлами онтологии, поиск семантических зависимостей, поиск
ответа на вопрос пользователя). Также планируется провести полноценное тестирование
системы, на больших объемах данных — например, на множестве статей с известных
новостных сайтов. Подобный выбор тестовых данных весьма распространен среди
разработчиков систем, нацеленных на извлечение информации из текстов. Например, в
работе [18] авторы в качестве анализируемых корпусов текстов предлагают рассматривать
статьи, опубликованные на известных новостных сайтах CNN и Daily Mail — этот набор
данных стал стандартным для задач понимания текстов.