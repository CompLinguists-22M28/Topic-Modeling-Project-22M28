Поддержка модели превентивной медицины: 
модуль обработки естественного языка для дистанционного взаимодействия «клиника-пациент»
А.В. Чижик1,2, М.П. Егоров 1, 
М.Ю. Якубова1, Д.А. Погребной1, А.С. Кривошапкина1
1. Введение
Здоровье населения является одним из факторов, влияющих на полюс, к которому стремится социальное настроение, и с этой позиции оно является достаточно сложным феноменом, определяющимся через взаимодействие социальных, психологических, экономических и только затем биологических, генетических и физиологических факторов. Иными словами, во многом уровень здоровья населения зависит от мировоззренческого контекста, присутствующего в обществе и способствующего выстраиванию постоянной и доверительной коммуникации с медицинскими учреждениями. Предпосылкой для проведения этого исследования стал опыт создания мультимодального интеллектуального помощника для автоматизации процесса приема пациентов и оказания первичной медицинской помощи. Системы здравоохранения во всем мире используют автоматизацию для решения проблемы нехватки персонала, а также для эффективного управления и сортировки пациентов в больших масштабах в больницах и клиниках. Одним из видов автоматизации являются чат-боты и сопутствующие технологии, позволяющие автоматизировать процесс первичного общения с потенциальным пациентом (включая фиксацию симптомов на стороне клиники и предоставление человеку необходимой справочной информации). Это позволяет преодолеть географические и временные барьеры между службами здравоохранения и их пользователями. Таким образом, конечной целью этих усилий является переход от неотложной помощи к профилактической, что возможно только на основе управления взаимодействием на основе данных. Важно отметить, что есть новые социологические исследования, которые показывают тенденцию: каждый пятый врач покидает профессию в течение двух лет по причине профессионального выгорания, что объясняется большим количеством рутинной деятельности (преимущественно офисного характера) [1, 2]. Чат-боты могут облегчить нагрузку на врачей, медсестер и других медицинских работников, автоматизируя задачи, которые лучше подходят для компьютера, и в результате освобождая медицинские бригады для более продуктивного выполнения своей основной работы.
Проведя серию экспериментов по созданию чат-бота с открытым доменом для общения пациента с клиникой, мы поняли, что невозможно создать полностью универсальный диалоговый агент, который любая клиника могла бы запустить в работу без дополнительных усилий. В то же время стало понятно, что клиникам нужны готовые модули, из которых можно было бы собрать нужную функциональную конфигурацию диалогового агента непосредственно на стороне клиники.
Поэтому мы решили создать библиотеку для языка Python, которая могла бы:
₋	обнаружить симптомы в реплике пользователя (на вход языковая модель получает короткий текст на ЕЯ, содержащий ответы со стороны пользователя на вопросы бота порядка «опишите свое самочувствие»);
₋	использовать эту информацию для вынесения интерпретируемого суждения о возможном диагнозе (т.е. диагноз и сопроводительную информацию о вероятностном распределении – концепция «второго мнения»);
₋	присвоить пациенту метку срочности (мультиклассификация пациентов для распределения потоков пациентов в клинике). 
На рис. 1 показана логика разработанного модуля.
Рис. 1. Блок-схема разрабатываемого модуля
В рамках поднимаемой проблемы актуальными являются исследования, посвященные методам обработки и понимания естественного языка (NLP, natural language processing и NLU, natural language understanding). При разработке диалогового агента обычно решаются следующие классические задачи обработки естественного языка: сегментация, токенизация и лемматизация, NER и нахождение семантических связей [2]. Существуют и специфические задачи [3]: обработка последовательности из нескольких фраз, дополняющих друг друга; поиск ссылок с одной фразы на другую; обработка чередования разных типов интентов подряд; генерация уточняющих вопросов и их обработка. В нашем исследовании мы в первую очередь сосредоточились на проблеме выявления симптомов (и их отрицания) и последующем использовании этой информации для определения диагноза [4, 5]. Следует отметить, что задача создания специализированных языковых моделей является достаточно динамично развивающейся, в частности, можно упомянуть следующие два современных исследования (относящихся к области медицины) [6, 7, 8], подход которых заключается в использовании условно закрытых данных (электронные медицинские карты пациентов, ЭМК).
2. Данные
Ролевая модель дистанционного взаимодействия между клиникой и пациентом подразумевает, что диалог строится в формате разговорного русского языка, свойственного социальным сетям (так как сам интерфейс любого диалогового агента напоминает месседжер). Таким образом, при формировании набора текстовых данных необходимо стремиться к близости собираемых реплик к языку пациентов, а не к служебному языку медиков. Поэтому мы решили отойти от общей тенденции использования при разработке подобных модулей текстовых данных, взятых из ЭМК (анамнез и диагнозы) и собрали данные из открытых веб-источников:
₋	основа набора данных – 5 193 описания пациентов своих заболеваний с маркером категории болезни (источник: https://meduniver.com);
₋	датасет дополнен 292 заболеваниями с их описанием (источник: https://health.mail.ru/disease/adneksit/);
₋	также были собраны данные о симптомах из Википедии (272 симптома).
Рис. 2. Распределение категорий болезней
На рис. 2 показано распределение заболеваний по медицинским категориям. В ходе анализа данных, было выяснено, что в среднем пациент упоминает 2-3 симптома, присутствующих в его самочувствии, и тратит на описание около 66 слов.
3. Метод
На рис. 3 показана логика взаимодействия с текстовыми данными, которой мы придерживались при разработке данного модуля.
Было решено разработать систему подмодулей, что должно обеспечить возможность использовать библиотеку не только в полном функционале, но и частично, например, только для выделения симптомов.
Рис. 3. Пайплайн обработки и классификации медицинских текстов: текущая реализация
Процесс предобработки данных в рамках нашего проекта практически ничем не отличался от стандартного набора процедур, однако в отличие от классических подходов к этому этапу, мы решили сохранять некоторые стоп-слова, чтобы не потерять отрицание симптома (исходя из того, что отрицание симптома тоже является симптомом). 
Далее нам потребовался список симптомов для их последующего извлечения из текстов. Хотя существуют методологии детекции ключевых слов, которые можно применить, в нашем случае они оказались не очень полезными. Поэтому был использован готовый список симптомов из открытой базы знаний «Википедия». Далее для формирования необходимой информации мы использовали фреймворк Scapy. Он может извлекать необходимые объекты из текста, используя предварительно обученную модель машинного обучения. МL-модель, доступная во фреймворке по умолчанию, не смогла справиться с большинством симптомов. Поэтому был создан некоторый набор правил-подсказок, чтобы помочь модели. Каждая такая подсказка – паттерн, написанный отдельно для каждого симптома. Как уже было отмечено выше, также перед нами стояла задача детектирования отрицания симптомов. Для этой цели мы использовали пакет Python negex, который работает со всеми найденными сущностями и пытается найти отрицание для каждой из них (это реализуется за счет определения границ частей предложения и поиска в этих границах специальных слов и других признаков, полезных для задачи поиска отрицания).
После этих двух шагов у нас появился общий анамнез, сформированный на основании данных основного датасета, который включил все возможные симптомы со статусами (yes, no, no_info, confused). Диаграмма этого процесса представлена на рис. 4.
Рис. 4. Логика формирования набора симптомов со статусами
В моменте взаимодействия с репликой пользователя появляется задача мультиклассовой классификации, которая в нашем модуле решается с помощью модели логистической регрессии.
Отметим, что логистическая регрессия – это статистическая модель, которая используется для прогнозирования вероятности возникновения некоторого события, в данном случае для диагностики конкретного заболевания. Модель применяется к подготовленным данным и подразумевает создание матрицы признаков, в которой каждый столбец представляет определенный симптом, а каждая строка представляет конкретный случай пациента. Значения в ячейках матрицы указывают на наличие (1), отсутствие (0) или отрицание (-1) симптома. Используя подготовленную матрицу признаков и соответствующие метки классов (заболеваний), модель логистической регрессии обучается. В процессе обучения модель определяет оптимальные веса для каждого признака (симптома), которые позволяют наиболее точно классифицировать заболевания.
Преимуществом логистической регрессии является интерпретируемость результатов. Веса, присвоенные каждому симптому, отражают важность этого симптома в определении заболевания. Таким образом, врачи и другие медицинские работники могут анализировать эти веса и понимать логику результата модели. Более того, логистическая регрессия учитывает наличие, отсутствие и отрицание симптомов, что делает результаты еще более точными и надежными. Из вышеизложенного ясно, что нам становится легко получить удобочитаемую интерпретацию диагноза пациента. Текущая точность модели составляет 86%.
Можно обозначить конечной целью нашего модуля определение срочности приема/госпитализации пациента. Система здравоохранения в России предполагает 3 формы помощи: экстренную, срочную и плановую. Поэтому, чтобы разметить данные по срочности, мы собрали симптомы из различных открытых источников по категориям экстренных, срочных и плановых приемов. Для тестирования точности наших моделей машинного обучения мы сосредоточились на заболеваниях из категории «кардиология». Размеченные на три класса срочности симптомы были верифицированы на предмет применимости к задаче кардиологами Национального медицинского исследовательского центра им. В.А. Алмазова. Отметим, при отнесении случая к первым двум категориям (экстренный и срочный прием) пациенту требуется госпитализация, поэтому было принято решение маркировать данные бинарно: госпитализация требуется или не требуется.
Рис. 5. Содержания класса «плановый прием»
Из предобработанных симптомов были составлены биграммы и триграммы. Дальнейшая логика была такова: если в предобработанном тексте пациента присутствовал хотя бы один из этих 2-3-граммов, то кейс маркировался как срочный. В результате мы получили датасет, содержащий 41 срочный случай и 231 плановый. Базовой идеей было использование модели логистической регрессии и tf-idf векторизатора. Однако модель переобучилась из-за несбалансированности классов и присутствию в «несрочном» классе большого количества шума (класс содержал просьбы пациентов интерпретировать результаты анализов) – рис.5.
Поэтому следующим шагом стало обучение нейросети на Self Attention. Для каждого слова были взяты word2vec-эмбеддинги, затем Self Attention был использован для анализа контекста каждого слова. В итоге получены следующие метрики качества модели маркировки срочности: Accuracy = 0.93 и F1 = 0.96.
4. Заключение
В настоящее время коллектив авторов работает над улучшением значений метрик качества и планирует измерять качество модуля за счет привлечения медицинских экспертов для тестирования. Кроме того, наборы данных планируется дополнить новыми случаями. На наш взгляд, текущие тесты показывают, что модуль применим на практике. Наборы данных и библиотека находятся в свободном доступе на github (https://github.com/NIRMA-PATIENT-INTAKE).