подготовка набор дать для вопросно-ответный поиск по база знаний. первый этап: сопоставление сущность в.о. кораблин 1,2 1 университет итмо, 2 jetbrains research введение задача вопросно-ответный поиск – предоставить точный и исчерпывающий ответ на вопрос, задать человек на естественный языке. в этот задача выделяться два основный направление – общий вопросно-ответный поиск и вопросно-ответный поиск по база знаний. в первый поиск производиться по большой коллекция текстовый документ и раздельный на два стадия – 1) извлечение потенциально релевантный параграфов; 2) выделение в параграф фрагмент текста, содержать ответ. значительный отличие вопросно-ответный поиск по база знаний, как и следовать из названия, являться использование специализировать база знание в качество источник информации. база знание представлять себя множество фактов, который обычно структурировать в вид тройка «субъект-предикат-объект» или «субъект-предикат-литерал», например (москва, является_столицей, россия) и (александр_сергеевич_пушкин, дата_рождения, 06-06-1799). субъект и объект принять называть сущностями, а предикат - отношениями. любой сущность и отношение иметь свой собственный уникальный идентификатор, а также один или несколько название на естественный языке. основной задача вопросно-ответный поиск по база знание являться преобразование вопрос на естественный язык в конструкция некоторый формальный языка, например, sparql-запрос или термы лямбда-исчисления. среди популярный применение вопросно-ответный поиск – быстрый ответ поисковый машин. также известный пример являться программа ibm watson [1], обыграть сильный игрок в викторин «jeopardy!». для достижение значительный прогресс в любой задачах, связанный с естественный языком, в тот числе, вопросно-ответный поиска, очень важный набор дать с высококачественный разметкой. c момент появление набор дать для общий вопросно-ответный поиск stanford question answering dataset (squad) [2] быть выпустить достаточно много другой различный набор дать для решение и оценка этот задачи. для вопросно-ответный поиск по база знание доступно гораздо маленький набор данных, при это за последний несколько год быть разработать множество различный метод [3] качество работа который необходимо оценивать. недавний статья [4] упоминать 10 набор данных, из который лишь 5 состоять из более чем 5,000 вопросов. при это всё вопрос в этот набор сформулировать на английский языке, что не позволять эффективно обучать и оценивать модель для другой языков. в то же время автор недавний исследование [5] выделять многоязычный вопросно-ответный поиск по база знание в качество один из главный направление развитие области. в связь с это перед мы возникать задача создание набор дать на русский языке. для создание такой набор требоваться множество пара «вопрос-ответ», который можно получить, например, из коллекция викторин. также необходимо сделать выбор сам база знаний, по который быть производиться поиск ответов. наиболее популярный являться три база знание – freebase [6], dbpedia [7] и wikidata [8]. несмотря на то, что большинство существующий датасет построить над freebase, с 2015 год google прекратить поддержка этот база знаний, поэтому информация в она уже сейчас являться в многое устаревшей. больший часть дать freebase быть перенести в база знание wikidata. wikidata поддерживаться крупный сообщество wikimedia, позволять пользователь свободно редактировать информация и на данный момент являться наиболее активно развивающейся. база знание dbpedia редактироваться только небольшой число поддерживать она экспертов, из-за что сильно проигрывать wikidata в объём иметься данных. поэтому мы сделать выбор в польза wikidata в качество основной база знаний. однако наиболее ценный часть набор дать являться разметка каждый такой пары. в простой случай разметка состоять из запрос на язык sparql и идентификатор сущность в база знаний, являться ответом. для создание разметка по вопрос вручную требоваться знание структура база знание и язык sparql, кроме того, ручной разметка занять у эксперт очень много времени. один из популярный способ ускорить процесс разметка являться она декомпозиция на последовательность более простой шагов, каждый из который мочь быть легко выполнить любой человек после небольшой (5-10 минут) подготовки. этот шаг мочь быть сформулировать в вид задание на краудсорсинговый платформа и быть выполнить быстро и относительно дешево. один из способ автоматический построение sparql-запросов, предложить автор датасет freebaseqa [9], также основать на вопрос викторин, заключаться в следующем. мы необходимо понять, какой сущность упоминаться в текст вопрос и текст ответа, после что выбрать правильный отношение между ними. например, в вопрос «кто снять фильм “бриллиантовый рука”»? должный быть выделить сущность q1999930 (“бриллиантовый рука”) и q11424 (фильм), он ответ – леонид гайдай – должный быть сопоставить сущность q312480, а затем между сущность q1999930 и q312480 нужно найти отношение p57 (режиссер). в рамка дать работа мы рассмотреть задача сопоставление сущностей. решение этот задача зачастую разбиваться на два этапа: выделение сущность в текст и последующий нахождение соответствовать выделить фрагмент сущность в база знаний. для первый этап наиболее часто использоваться n-граммный модель [10; 11; 12; 13]. ещё один популярный инструмент являться модель распознавание именовать сущностей, основать на нейронный сеть [14; 15; 16; 17]. для сопоставление фрагмент сущность практически всё метод использовать индекс название сущностей, производить в немой поиск по строковый схожести. предложить в дать работа метод сочетать в себя ориентировать на полнота приём с приемами, ориентировать на точность. в то же время автоматически мочь быть выделить лишь список сущностей, который потенциально мочь содержаться в вопрос или ответе, однако из-за языковой неоднозначность часто нельзя без помощь человек точно определить, какой из они действительно упоминаться в тексте. для решение этот проблема мы использовать задание на краудсорсинговый платформе. далее статья организовать следующий образом. в раздел 2 описываться особенность подготовка задание для краудсорсинговый платформа и объясняться влияние этот особенность на решение задача выделение сущностей. в раздел 3 описать схема разработать мы алгоритм генерация список сущностей-кандидатов, а также различный нюанс он реализации. раздел 4 описывать получить результаты. 1. особенность разметка дать с помощь краудсорсинг 1.1. краудсорсинговый платформа краудсорсинговый платформа представлять себя веб-сервис, позволять заказчик создавать проект и загружать в они задания, который быть выполнить автоматически подобрать исполнителями. перед выполнение задание исполнитель изучать инструкция и проходить небольшой обучение, подготовить заказчиком. обычно проект настраиваться такой образом, чтобы каждый задание быть выполнить несколько исполнителями, после что они оценка агрегироваться с помощь предоставлять платформа алгоритмов. для мотивация исполнитель и контроль качество выполнение задание платформа предоставлять разнообразный инструменты, однако ключевой момент для получение наиболее высокий точность ответ являться простота и понятность сам задания. наиболее простой на практика оказываться задание на классификацию. именно к такой задание мы свести наш задача выделение сущностей. 1.2. выделение сущность как задача классификация мы быть выделять сущность в вопрос и ответ в два этапа. на первый этап с помощь разработать мы алгоритм мы построить список сущностей-кандидатов. на второй этап мы запустить задание по выбор правильный кандидат на краудсорсинговый платформе. задача выделение сущность в текст вопрос и текст ответ отличаться тем, что в вопрос мочь упоминаться несколько сущностей, а в ответ – только одна. поэтому для текст ответ мы мочь просто сгенерировать список кандидатов, а затем просить исполнитель выбрать из это список правильный сущность. при это число вариант должный быть относительно небольшим. кроме того, чтобы облегчить задача исполнителя, и тем самый уменьшить время, потратить на разметку, мы должный постараться показывать вариант в порядок уменьшение вероятность они упоминания. для текст вопрос мы мочь бы сформулировать похожий задание, но просить исполнитель отмечать несколько кандидатов, каждый из который упоминаться в вопросе. однако у такой подход есть существенный недостатки. во-первых, исполнитель прийтись внимательно изучать различие между кандидатами, иметь похожий названия, что существенно замедлить процесс разметки. во-вторых, ответ на задание с множественный ответ не мочь быть автоматически агрегированы, не позволять настроить некоторый важный правило контроль качества. поэтому в данный случай наиболее подходящий решение являться сведение выбор кандидат к бинарный классификации. мы быть показывать каждый исполнитель вопрос и только один из кандидатов, и просить определить, упоминаться этот кандидат в текст вопроса. при использование это подход увеличиваться количество заданий, однако каждый из они становиться намного проще, что в результат приводить к более быстрый выполнение весь набор заданий. тем не менее, количество кандидат также необходимо ограничить некоторый небольшой числом. 2. алгоритм генерация сущность-кандидат 2.1. общий структура алгоритм наш алгоритм состоять из предварительный этап подготовка дать и четыре основный этап генерация список кандидатов. на предварительный этап собираться название весь известный сущность и индексироваться поисковый движком. на первый этап генерация кандидат в текст вопрос или ответ выделяться фрагменты, который мочь содержать упоминание сущности. на второй этап этот фрагмент использоваться для формирование запрос к поисковый индексу. на третий этап результат запрос проходить процедура ранжирования. на заключительном, четвертом, этап из ранжировать результат несколько запрос формироваться окончательный список кандидатов. общий схема алгоритм показать на рис. 1. 2.2. подготовка поисковый индекс для решение задача выделение сущность необходимо иметь список весь иметься в база знание сущностей, из который мы быть выбирать кандидат для конкретный текста. в рамка задача подготовка русскоязычный набор дать мы интересовать только тот сущность wikidata, для который иметься русскоязычный название. однако не всё из они являться полезный - многие сущность выражать служебный понятие проект wikimedia и не нести фактологический информация о мире. мы выделить 6 тип такой сущность - страница значение wikimedia, категория wikimedia, статья wikinews, список стать wikimedia, словарный запись и энциклопедический статья. сущность в wikidata мочь быть известный под несколько именами, например, земля также иметь название голубой планета, третий планета и мир. с помощь серия sparql-запрос для весь подходящий сущность быть получить идентификатор и список названий. весь мы получить 4,114,595 уникальный сущность и 5,430,657 различный названий. далее необходимо быть построить поисковый индекс на получить данных. в качество поисковый движок быть выбрать elasticsearch, предоставлять широкий набор настройка для индексирование и выполнение запросов, а также иметь удобный api для многий язык программирования. мы представить наш сущность как набор текстовый документов. каждый получить название сущность выступать в качество отдельный документа, а в качество метаинформация документ быть прикрепить соответствовать идентификатор сущности. перед индексирование также принять производить морфологический обработка документов, причём обработка документ и последующий запрос должный производиться один и тем же методом. существующий морфологический анализатор для русский язык работать достаточно медленно – обработка один запрос занимать несколько секунд, а запрос в дальнейший мы быть делать много, поэтому быть принять решение воспользоваться встроить в elasticsearch простой анализатор snowball [18] для русский языка. 2.3. фрагментация текст итак, мы переходить к непосредственный описание алгоритм генерация кандидатов. на первый этап мы хотеть выделить в текст фрагменты, который мочь содержать упоминание сущности. хорошо известный задача выделение именовать сущностей, который хороший весь решаться с помощь обучение нейронный сеть [19]. подход с использование такой модель для фрагментация текст при сопоставление сущность применяться в несколько работах, посвятить создание набор дать [9; 16; 20]. основный недостаток это подход являться неспособность выделять сущности, выражать класс или название предметов, например мультипликационный фильм или молоток. также готовый модель плохо справляться с определение граница фрагмент в случаях, когда некоторый именовать сущность являться часть правильный сущности. например, в вопрос «кто написать музыка гимн россии?» быть выделить фрагмент россии, в то время как искомое являться фрагмент гимн россии. для устранение указанный недостаток и повышение полнота получать список сущность-кандидат мы использовать такой модель лишь в качество один из способ фрагментации, комбинировать этот способ с другими. для удобство работа с текст мы убирать из он всё знак препинание и разбивать по пробел на токены. получиться список токен в дальнейший быть называть tokens. из это список мы получать три различный тип фрагментов. фрагмент первый тип мы получали, извлекать из список tokens всё n-граммы. такой фрагмент позволять найти в индекс точный упоминание сущности. для получение качественный результат необходимо выбрать подходящий число n. для ответ хороший значение являться 2, так как больший часть текст ответ являться упоминание сущности. текст вопрос содержать более разнообразный языковой конструкции, поэтому многие 2-грамм не содержать упоминание сущностей. тем не менее, эксперимент показали, что уже при n, равный 3, мы получать приемлемый точность. список получить такой образ фрагмент мы быть называть ngrams. фрагмент второй тип мы получать с помощь модель выделение именовать сущностей. получить список такой фрагмент мы быть называть ner. третий тип быть представить ровно один фрагментом. это единственный тип фрагмента, который не являться набор последовательный токен из список tokens. этот фрагмент необходимый для обнаружение сущностей, который коротко выражаться (1-2 токена) и не являться именованными. для получение такой фрагмент мы получить для каждый из токен из список tokens он часть речь с помощь инструмент mystem, а затем удалять токен, если он часть речь быть один из следующих: союз, междометие, частица, предлог, местоимение, наречие или глагол. токен этот часть речь мочь быть часть название сущности, состоять из нескольких, обычно более чем два токенов, однако сам по себя крайне редко выражать какой-либо сущность. получиться фрагмент мы быть называть filtered_tokens. 2.4. создание запрос к поисковый движок на следующий этап из получить фрагмент мы формировать запрос к индекс elasticsearch. напомним, что каждый фрагмент представлять себя список токенов. для создание текст запрос каждый список токен конкатенироваться в строка с пробел между токенами, такой образом, мы получить строка из каждый фрагмента. далее этот строка быть использовать в качество текст запрос два различный типов, предоставлять поисковый движком. первый тип – обычный полнотекстовый запросы, позволять искать в индекс документы, содержать один или несколько токен запроса, и ранжировать результат по метрика bm25. elasticsearch позволять также настроить для это тип запрос так называть нечёткий поиск. при он использование токены, незначительно отличаться друг от друга, быть считаться идентичными, что позволять справляться с опечатка в исходный текст и ошибка встроить морфологический анализатора. отличие между токен оцениваться с помощь расстояние редактирования, при это разрешить значение метрика являться динамический и зависеть от длина токенов. чтобы избежать случайный совпадений, вызвать тем, что в число операция для подсчёт расстояние редактирование есть операция перестановка соседний букв, мы также произвести настройку, запрещать токен считаться одинаковыми, если различаться они первый буквы. настроить такой образ полнотекстовый поиск быть применить к фрагмент filtered_tokens, так как он мочь содержать несколько различный упоминание сущность в неопределённый порядке. второй тип – фразовый запросы, позволять найти в индекс точный вхождение текст запрос в документ. этот тип запрос использоваться для фрагмент ngram и ner, так как этот фрагмент должный соответствовать конкретный упоминание сущностей. всё строки, получить из фрагмент ngram, быть включить в один запрос, в то время как каждый из строк, получить из фрагмент ner, порождать свой собственный фразовый запрос. 2.5. ранжирование результат запрос на следующий этап результат запрос должный быть ранжировать такой образом, чтобы выше оказаться сущности, более вероятно упоминаться в тексте. для ранжирование мы использовать два параметра. первый – оценка bm25, выдать elasticsearch. она показывает, насколько текст запрос соответствовать текст документ (то есть название некоторый сущности). второй – количество месячный просмотр статья википедии, соответствовать сущности. так мы узнаем, насколько популярный являться это сущность. изначально результат запрос упорядочить по оценка bm25 по убыванию. для ранжирование с использование статистика просмотр википедия мы ввести численный параметр rate и разбить всё результат запрос на группы, внутри который оценка результат отличаться не более чем в rate раз. после это внутри каждый группа мы переупорядочить результат по убывание количество просмотр соответствовать статья википедии. 2.6. формирование список сущность-кандидат на заключительный этап мы собирать окончательный список сущность-кандидат из ранжировать результат запросов. для управление размер это список и вкладом, вносить каждый из тип запросов, мы ввести три параметр – p, f и m, смысл который мы указать далее. сначала в список быть добавить первый p сущность из запроса, сформировать из фрагмент nrgam. затем из каждый из запросов, сформировать они фрагмент ner, быть взять по один первый сущности, сущность быть отсортировать по число просмотр статья википедия и получиться список быть добавить к результирующему. наконец, в список быть добавить первый f сущность из полнотекстовый запроса. после это быть убрать всё дубликат сущность в результирующий списке. если размер список оказаться меньше, чем m, мы дополнять он следующий сущность из полнотекстовый запрос до величина m, либо пока не исчерпаться результат запроса. значение параметр для разный тип текст привести в табл. 1. 3. оценка результат работа алгоритм для того, что оценить качество работа разработать алгоритма, мы с он помощь сгенерировать список сущность-кандидат для 14,435 пара “вопрос-ответ”. средний длина список кандидат для вопрос составить 9.37, средний длина список кандидат для ответ – 5.4. следовать раздел 2.2, мы создать задание на краудсорсинговый платформа яндекс.толока и получить результат они выполнения. так как для ответ правильный всегда должный являться только один сущность, мы изучили, как высоко оказываться правильный ответ в наш список кандидатов. результат привести в табл. 2. видим, что наш список быть действительно хорошо упорядочены, и наиболее вероятный кандидат быть расположить выше наименее вероятных. чтобы выяснить, почему для многий ответ мы не смочь найти правильный сущность, мы проанализировать 100 случайный ответ и они список кандидатов. оказалось, что только в 14 случай причина стать ошибка наш алгоритма, например, для ответ бородин быть найти 7 населить пункт с название бородино, а композитор александр порфириевич в список кандидат отсутствовал. распределение остальной причина показать в табл. 3. заключение разработать мы алгоритм генерация список сущность-кандидат хорошо проявить себя на практике, обеспечивать достаточный полнота при относительно небольшой средний длина списков. в дальнейшем, использовать этот алгоритм, мы смочь автоматически построить sparql-запрос для вопросов, получить необходимый разметку, и тем самый сформировать новый набор дать для оценка метод вопросно-ответный поиск по база знаний. заметить также, что высокий качество алгоритм позволять использовать он в качество система выделение сущность в предложение наподобие dbpedia spotlight [21] – для это достаточно отсекать кандидат из список по некоторый порог получить оценки.