разработка и реализация метод генерация правило для автоматический проверка правописание п.я. бахвалов университет итмый введение автоматический проверка правописание – это задача автоматический обнаружение и исправление грамматических, стилистический и орфографический ошибка в тексте. актуальность этот задача определяться тем, что человек свойственно делать ошибка правописания. далеко не всё хорошо знакомый с правило грамматика язык или только приступать к они изучению. помимо этого, существовать болезни, такой как дисграфия, при который человек особенно тяжело правильно писать. задача осложняться за счёт такой фактор как неформализованный грамматика, свободный порядок слово в предложении, зависимость слово от контекста, постоянный изменение в языке, диалекты, сленг, жаргон, омоним и др. подход к задача автоматический проверка правописание можно разделить на три типа: основать на правилах, основать на метод машинный обучение и гибридные. подход, основать на правилах, считаться устаревшим, т.к. правило обычно писать квалифицировать лингвисты, иметь низкий полноту, но более высокий точность. с другой стороны, подход на основа машинный обучение показывать высокий покрытие ошибка и сейчас являться state-of-the-art. гибридный же подход обычно выигрывают, т.к. всегда можно взять за основа подход на машинный обучение и добавить в он правила, для который взять подход плохо работает, тем самый увеличивать точность и полноту. несмотря на значительный прогресс в метод решение задача проверка правописания, основать на машинный обучении, у подхода, основать на правилах, оставаться ряд существенный преимуществ: — интерпретируемость правил; — возможность редактирование набор правил; — низкий потребность в вычислительный ресурсах. квалифицировать специалист всегда мочь посмотреть на каждый конкретный правило и определить, соответствовать ли оно правило в естественный языке. пользователь система также смочь получить информация о правиле, который он нарушил. в системе, основать на правилах, новый правило можно просто добавить в общий список. то же самый относиться к ошибка в правилах: лингвист смочь исправить правило, добавить исключение или выключить он в такой системе, в то время как в системе, основать на машинный обучении, ошибка быть возникать снова и необходимо полностью переобучать модель. системы, основать на машинный обучении, гораздо более требовательный к ресурсам, поэтому они невозможно использовать локально на устройство пользователя. к сожалению, не всё пользователь иметь доступ к безлимитный и бесперебойный интернет для взаимодействие с такой система на выделить серверах; особый случай связать с работа с конфиденциальный информацией, где недопустимый отправка дать по сети, в особенность на сторонний сервер. модель, который занять первый место на последний соревнование по автоматический исправление ошибка (bea-2019) [1], занимать 3.7гб в сжатый виде, в то время как системы, основать на правилах, занимать весь десяток мегабайт. основной сложность систем, основать на правилах, являться то, что правило писаться вручную квалифицировать лингвистами. когда количество правило достигать тысяч, становиться проблематично отслеживать полнота правило и проверять, покрывать ли каждый правило всё случаи, в тот число исключения. решение этот проблема мочь быть автоматический генерация правил. существовать ряд работа в это направлении. автор [2] предлагать подход, основать на имитация иммунный система человека, когда ошибка рассматриваться как патогены, а правило как лимфоциты. существовать подходы, основать на расстояние редактирование на уровень слово [3]. однако ни один из подход не работать хорошо на весь тип ошибок. большинство описать в литература реализация инструмент недоступный для публичный использования. к тот же сложно сравнивать результат разный методов, т.к. в каждый работа использоваться свой набор данных. на практика система проверка правописание на основа правило активно использоваться и развиваться в настоящий время. один из такой система являться languagetool, для который с 2003 год команда лингвист писать правило на основа присылать они ошибка [4]. дать система являться бесплатный и иметь открытый исходный код, а также подходить для автономный использование на локальный компьютере, поэтому набор правило дать система быть взять за основа настоящий работа и сгенерировать правило в итог быть адаптировать под неё. в настоящий работа быть выбрать английский язык, т.к. он являться основный язык научный коммуникация и технический документации. автор обзор система автоматический проверка грамматика предлагать следующий классификация тип ошибка [5]: грамматика, пунктуация, структура предложения, орфография, семантика. в дать работа быть рассматриваться только ошибка грамматики, пунктуация и ошибка в структура предложения. исправление орфографический ошибка хорошо разработать область, точность исправление такой ошибка уже достигать 91% [6]. категория семантики, с другой стороны, слишком сложна, и предложение с такой ошибка иметь правильный грамматический структуру. для определение такой ошибка часто требоваться учитывать контекст несколько предложений, а иногда и целое текста. как исключение, есть редкий подкатегория ошибок, когда человек использовать похожий по смысл слово, но который недопустимо в контекст данный словосочетания. например: «this is a durable (strong) drink». но такой ошибка исправляться по словарь подобный словосочетание и не входить в тематика настоящий работы. поэтому задача генерация правило для ошибка из категория семантика не иметь смысла. 1. обзор существующий метод исследование по автоматический исправление правописание вестись с 60-й год 20 века. уже тогда быть попытка решение задача с использование обычный словаря, n-граммной модели, и языковой модель [7]. новый импульс исследование придать открытый соревнования, который проводиться с 2011 года. первый в свой родиться соревнование являться hoo-2011, который предоставить первый общий набор дать для работа с ошибка правописание в открытый доступ, а также общий система оценивание работа [8]. потом быть conll-2014 [9] и последний из такой контест bea-2019, набор дать и система проверка который быть использовать в настоящий работа для проверка качество получить результат [1]. в 2011 год подход на основа байесовский классификатор для исправление ошибка в артиклях, предлог и некорректный выбор слово продемонстрировать превосходство над подходами, основать на правило [10]. в 2014 год хороший результат показать подходы, основать на статистический машинный перевод [11]. далее стать появляться подходы, основать на использование языковой модель [12; 13]. поздний для решение задача исправление ошибка в текст стать использоваться более сложный модель машинный обучения, например, трансформера [14; 15]. хороший подход на текущий момент на дать bea-2019 являться система, представлять себя ансамбль модель другой участник соревнование [16]. 2. подготовка дать для эксперимент 2.1. исходный дать в качество набор дать быть использовать данные, предоставить соревнование bea-2019, оно состоять из два частей. первый часть – дать с онлайн-платформа write & improve [17], который предлагать помощь при написание текст людям, для который английский язык не являться родным. второй часть набор дать – the locness corpus [18] – сборник сочинение студент-носитель английский языка, разметить сотрудник write & improve. общий объём дать – примерно 40000 предложение с ошибка и они исправлениями, сделать одновременно и носителями, и не носитель язык [1]. пример из набор дать представить на рисунок 1. 2.2. разделение по категория ошибка на начальный этап необходимо быть разделить дать на группа по тип ошибок. для дать задача быть использовать инструмент для аннотация грамматический ошибка errant [19]. в результат всё ошибка быть поделить по тип и по категория (см. табл. 1 и 2). весь получиться 54 категория ошибка – прямой произведение тип и категория за исключение тех, что не встречаться в исходный данных. пример из каждый категория быть сгруппированы, причём ошибки, не относиться к дать категории, быть исправлены, чтобы избежать они влияние на генерация правил. тем самый мы предполагаем, что в категория ошибка нет ни один другой ошибка кроме как из дать категории. 2.3. выделение признак после разделение дать по ошибка из слово и предложение быть выделить признак (см. табл. 3) в качество основа для генерация правил. пример разметить предложение представить на рисунок 2. для выделение признак быть использовать библиотека stanfordnlp [20]. 3. генерация правило 3.1. представление правило процесс проверка правописание выглядеть следующий образом: предложение разбиваться на токены, в немой выделяться признаки, описать выше, после что начинаться итерирование по каждый токену. токен подаваться в правило, как базовый элемент, от который правило быть отталкиваться. в общий случай правило состоять из два компонент: детектор и редактор. детектор – это набор условий, который должный быть выполнить в случай наличие ошибки. условие – это тип признак вместе с ожидать он значением, либо логический комбинация из другой условий, а также смещение относительно проверять токена. редактор – это набор изменений, который должный произойти с предложением. изменение состоять из: — смещение относительно проверять токена; — список новый токенов, который необходимо вставить перед изменяемый токеном; — список модификация над изменяемый токен (изменение регистр слова, изменение часть речь слова, полный замена); — флаг о необходимость удаление токена. данный формат удобный для генерация правило в отличие от формата, принять в languagetool. в немой правило выглядеть похожий образом, поэтому трансляция из один формат в другой при необходимость не вызывать сложность (см. рис. 3). <pattern> – это сгенерировать правило, внутри который <token> являться словом, на который надо реагировать, в параметр который можно задавать признаки. <marker> отвечать за то, что быть являться ошибка для пользователь и что нужно подчеркнуть. <example> – пример, браться из тестовый набор данных. <suggestion> – это то, на что надо исправить <marker>, генерироваться из редактора, внутри он можно использовать преобразование часть речь и обращаться к токен в правило по индексам. в итог лингвист оставаться только проверить осмысленность правило и придумать он описание, хотя он тоже можно сгенерировать автоматически. 3.2. transformation-based learning в качество метод генерация правило быть использовать обучение на основа трансформация [21]. этот метод использовался, например, для генерация правило морфологический разметки. процесс генерация правило выглядеть следующий образом. на вход подаваться набор дать с ошибка и они исправлениями. по каждый ошибка генерироваться правило для её детектирование согласно шаблон из задать списка. к детектор добавляться редактор, который быть исправлять ошибку, т.е. набор изменений, который необходимо сделать для исправления. на данный этап мы получить список правил-кандидатов. теперь быть итерироваться по каждый кандидат и применять он к весь набор данных, считать метрика качества. на каждый итерация выбирать хороший правило по задать метрика и применять он к весь набор данных. повторяем, пока оставаться ошибки, или результат не стать удовлетворительный (см. рис. 4). этот метод очень хорошо себя показать в многий область обработка естественный язык [21]. однако для применение метод к задача исправление ошибка в текст есть несколько препятствий: — неясно, откуда брать список шаблон для правил; — подсчёт метрика каждый раз для каждый правило занимать много времени; — метрика плохо подходить для наш задачи; — неясно, какой правило считать хороший на итерации. потенциально правило мочь являться любой комбинация из признаков, а количество шаблон очень быстро расти с рост количество признак и токенов. если пересчитывать метрика каждый раз, то уже на 1000 правило время выполнение быть достигать несколько день на персональный компьютере. если правило иметь большой количество одновременно ложный и корректный срабатываний, оно быть более приоритетным, в то время как более-менее продуктивный правило без ложный срабатывание быть выбрать гораздо поздний или не выбрать вовсе. помимо этого, возможный ситуация, когда два менее общий правила, который быть покрывать то же множество ошибок, быть работать хороший и давать маленький ложный срабатываний. применение более общий правило на более ранний этап не позволить генерировать более специфичный правило позже. метод быть взять за основа и модифицировать с учёт выявить недостатков. 3.3. предложить метод за основа быть взять часть корпус гутенберг [22] размер в ~2 млн слов, без грамматический и прочий ошибок. дать быть разбитый на токены, выделить признаки. после что быть построить граф возможный последовательность признак длина в три токен (далее тройка). на основа такой структура можно быстро находить количество тройка по задать набор условие для три подряд идти токенов. такой же граф быть сгенерировать для весь набор дать и для троек, включать ошибка из набор данных. для каждый ошибка в набор генерироваться каждый возможный тройка условие (порядок 250 тысяча на ошибку). далее, тройки, который часто (более 1% от весь троек) встречаться в «чистом» графе, а также тройки, который реагировать на слишком малый количество (менее четырех) ошибка отфильтровываются, после что выбираться первый тысяча хороший троек. после это для каждый отфильтровать тройка на основа граф из набор дать собираться индекс слов, на который дать тройка быть реагировать, и рассчитываться количество правильный и ложный срабатываний. в итог оставаться только тот тройки, который мочь исправить более 3 ошибка и иметь менее 1000 ложный срабатываний. для каждый тройка с индекс генерироваться условие для четвёртый и пятый токена, получать тем самый набор пятерок. для каждый пятёрка заново рассчитываться правильный и ложный срабатывания: при добавление новый условий, количество срабатывание мочь только лишь уменьшится, следовательно, достаточно проверить только тот срабатывание правила, который уже найтись для базовый тройки. выбираться хороший пятёрка по задать метрика для каждый ошибки. если она иметь точность большой 80% и исправлять не маленький три ошибок, то такой пятёрка считаться хороший и из она генерироваться детектор. вместе с детектор единственно возможный образ из изначальный ошибка генерироваться редактор. из детектор и редактор получаться правило-кандидат. после прохождение по весь ошибка и получение набор кандидат в правила, дублировать правило отфильтровываются. каждый раз выбираться хороший правило из набор и считаться качественным, после что выбрать правило применяться к набор данных. затем выполняться перерасчёт метрика для весь остальной правило из набор кандидат и процесс повторяться до тот пор, пока очередной правило не перестать удовлетворять задать метрике. подробный процесс генерация правило показать на рисунок 5. в качество результат работа можно рассмотреть следующий правило (см. рис. 6). в первый пример правило можно сформулировать так: если фраза начинаться с предлог in, далее идти любой притяжательный местоимение, за который следовать слово opinion, то после этот фраза следовать поставить запятую. в второй пример мы видим, что если встречаться слово many являться часть связка с существительным, то существительное, к который оно относится, должный находиться в множественный числе. третий правило удалять определённый артикль the в фраза at the school. 4. оценка качество для оценка качество быть использовать f-мера, который представлять себя гармонический средний между точность и полнотой, она стремиться к нулю, если точность или полнота стремиться к нулю. стоить отметить, что при работа с правилами, больший значение придаваться точности, чем на полноте, потому что важный правильно исправить ошибку, чем покрыть больший количество ошибок. в такой случай f-мера мочь быть модифицировать с учёт необходимый приоритета. в настоящий работа приоритет точность считаться в два раз выше приоритет полноты, такой мера принять называть f0.5 (см. рис. 7). 4.1. результат генерация правило по категория для часть категория с помощь разработать метод быть сгенерировать правила. другой часть быть исключена. например, категория опечаток, орфографии, морфология быть исключить т.к. не рассматриваться в дать работе. категория сокращений, преобразование существительное и глагола, форма прилагательного, быть исключить ввиду слишком малый количество ошибка для обучения. также быть исключить категория “остальное”, потому что содержать в себя слишком разнородный набор ошибок. для остальной категория результат представить в табл. 4. после генерация правило быть проверить на третий часть набор данных, который не использоваться при генерация и показать следующий результат (см. табл. 5): 4.2. качество правило для languagetool languagetool быть запустить на дать для обучения, после что правила, у который быть слишком много ложный срабатываний, быть выключены. после что к исходный правило быть добавить правила, получить с использование предложить подход (см. табл. 6). вывод с помощь предложить метод удаться сгенерировать 1238 правило для 36 категорий. качественный весь правило получиться для категория пунктуации, форма глагола, согласование глагол с существительное и фразовый глаголах. для категорий, в основный связанный с замена часть речи, не удаться сгенерировать качественный и общий правил, т.к. ошибка в они сильный зависеть от контекст предложения, чем от близкий 5 токен к ошибке. результат на дополнительный дать это подтверждают, категория наречие оказаться впереди лишь по причина слишком малый количество ошибка это тип в выборке. предложить метод давать определённый прирост в качестве, получить правило существенно расширить тот 3203 правила, который уже присутствовать в languagetool и увеличить количество найти ошибок. в дальнейший планироваться рассмотреть возможность генерация правило не для подряд идти токен в предложении, а для токенов, связанный через граф зависимостей, получить после синтаксический анализа. это позволить сильный учитывать контекст в рамка один предложение и генерировать более общий правило для связка существительное с глагол без учёт лишний слово между ними.