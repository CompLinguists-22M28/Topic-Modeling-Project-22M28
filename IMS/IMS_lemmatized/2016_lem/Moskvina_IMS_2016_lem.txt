разработка ядро синтаксический анализатор для русский язык на основа библиотека nltk а.д. москвина, д. орлова, п.в. паничева, о.а. митрофанов санкт-петербургский государственный университет moskvina.anya@gmail.com, frenezo@mail.ru, p.panicheva@spbu.ru, o.mitrofanova@spbu.ru 1. введение 1.1. постановка проблема метод автоматический анализ естественный язык и компьютерный технология обработка информация — это наиболее динамично развивающийся область компьютерный лингвистика в наш дни. тем не менее, в этот область оставаться задачи, до сей пора не найти общепризнанный решения, и среди они синтаксический анализ, наиболее сложный этап досемантический обработка текста, без который невозможно осуществлять процедура извлечение фактов, автоматический перевода, реферирования, построение вопросно-ответный система и многие другие. на сегодняшний день известный различный синтаксический анализатор (парсеры), однако большинство из они разрабатываться прежде весь для английский языка, например, stanford parser [http://nlp.stanford.edu/software/lexсборник научный стать xix объединить конференция «интернет современный общество» ims-2015, санкт-петербург, 22 - 24 июнь 2016 года. и parser.shtml]. в область автоматический обработка русский язык на уровень синтаксис накопить богатый и разнообразный опыт, восходящий к исследование основатель отечественный математический лингвистика [1–5 и т.д.]. идея модель «смысл <=> текст» воплотиться в многоцелевой лингвистический процессор «этап-3» [http://iitp.ru/ru/science/works/452.htm] [6], с помощь который быть создать первый синтаксически разметить корпус русский текст синтагрус [http://ruscorpora.ru/instruction-syntax.html] [7]. в начало 2000-й год получить известность проект диалинга (аот) [http://www.aot.ru/], в рамка который появиться доступный синтаксический анализатор с открытый документация [8]. реальный состояние дело в область синтаксический анализ русский текст быть оценить в 2012 год на соревнование парсер [http://www.dialog21.ru/digest/2012/?type=syntax], где участвовать 8 команда (среди они syntautom [9], dictascope syntax, semsyn [10], этап-3 [6], парсер semantic analyzer group, aot [8], abby syntactic and semantic parser [11], link grammar parser [12]) [13]. по результат быть подготовить «золотой стандарт» синтаксический разметка объём 800 предложение с описание допустимый расхождение в анализе. благодаря соревнование появиться банк синтаксический структура rstb, получить от три анализаторов: syntatom, semsin, russian malt [http://otipl.philol.msu.ru/~soiza/testsynt/files/info.htm]. хотя это соревнование не привести к выработка общепринятый стандарт для русскоязычный парсеров, тем не менее, наметиться направление дальнейший работы. сейчас многие научный лаборатории, работать в сфера компьютерный лингвистики, использовать свой собственный синтаксический анализатор (abbyy, rco, dictum и т.д.). что касаться процессоров, открытый для разработчик и свободно распространяемых, то их, во-первых, мало и они разный тип (длить русского, помимо аот, можно воспользоваться, к примеру, link grammar parser [http://slashzone.ru/parser/] [12], maltparser [http://corpus.leeds.ac.uk/mocky/] [14], а во-вторых, при работа с они нужно дополнительно решать задача по улучшение качество анализ и по синхронизация они с другой модуль конкретный лингвистический процессоров. 1.2. цель и задача обсуждать проект мы представляется, что путь к решение проблема автоматический синтаксический анализ лежать в сторона развитие открытый некоммерческий лингвистический платформ, среди который один из первый место занимать nltk (natural language toolkit) [http://www.nltk.org/] [15], набор библиотека для язык программирование python, ориентировать на выполнение основный процедура автоматический обработка текстов: от графематический анализ до синтаксический парсинга, от составление словарь до построение сложный статистический модель корпус текстов. синтаксический анализ основываться на дать морфологический разметка корпус текст и разрешение морфологический неоднозначности. наш парсер ориентировать на широкодоступный формат морфологический аннотация русский текстов, представить в тегсет морфоанализатор pymorphy2 [http://pymorphy2.readthedocs.org/en/latest/] [16]. итак, цель наш проект являться создание открытый синтаксический парсер для русский язык на платформа nltk. для достижение этот цель требоваться решить следующий задачи:  разработать система синтаксический правило для выделение синтаксический групп, составить категориальный грамматика в формат nltk;  синхронизировать правило категориальный грамматика для создавать парсер и морфологический анализатор для русский языка, работать с общепринятый система морфологический разметка (тегсетом);  провести пилотный эксперименты, проанализировать типовой ошибка работа парсера. 2. архитектура разрабатывать синтаксический анализатор 2.1. модуль синтаксический анализ в nltk модуль синтаксический анализ в nltk позволять разработчик самостоятельно создавать формальный грамматика различный тип для разный естественный язык и применять они в конкретный цель автоматический обработка текстов. формальный грамматика описывать потенциально бесконечный набор весь возможный синтаксически верный предложение (конструкций). грамматика мочь быть контекстно-свободными, вероятностный контекстно-свободными, лексикализовать и контекстно-зависимыми. с помощь набор синтаксический категория и набор правило (productions) контекстно-свободный грамматика определяет, как фраза категория a мочь быть представить в вид последовательность более маленький часть α1… αn. [15]. синтаксический анализ (парсинг) — это процедура нахождение один или более вариант разбор (деревьев), соответствовать грамматически правильный предложениям. в nltk есть несколько готовый парсеров, предполагать разный путь проверка соответствие предложение определённый синтаксический формализму. прежде всего, это нисходящий парсер (simple top-down parser), который предполагать последовательный применение правило для задать левый часть и сопоставление они предложение на входе. также есть возможность применить восходящий парсер (simple bottom-up parser), который обрабатывать предложение по очередь и искать для они соответствовать правый часть. в правило грамматика мочь применяться рекурсия, тогда категория из левый часть продукция повторяться в правой. рекурсия мочь быть прямой и непрямая. благодаря использование рекурсия в формальный грамматика мы получать возможность коротко описать сложный вложить конструкции. итак, встроить в nltk парсер обрабатывать поступать на вход предложение на основание правило грамматики, храниться в файл определённый формата, и строить структура составлять (ить несколько структур). этот структура отражать то, как слово и последовательность слово сочетаются, формировать синтаксический группы. появление более чем один разбор говорить о наличие синтаксический неоднозначности. 2.2. особенность категориальный грамматик в наш анализатор мы использовать вид категориальный грамматики, основать на признак категория (feature-based grammar). говорить о категориальный грамматике, мы подразумевать наличие в она такой категорий, как, например, именной группа (np) или глагол (verb). особенность рассматривать формализм являться возможность работать с так называть структура признаков, т.е., в наш случай оперировать информация о некоторый изменяемый параметр этот категорий. такой образ мы можем, например, явно указывать морфологический особенность компонент сочетания: s -> np[case=nomn, number=?n, gender=?g] vp[number=?n, gender=?g] здесь мы использовать переменный для выражение значение признаков. переменный ?g, задавать признак gender (род) категория vp (глагольный группа), мочь обозначать как мужской, так и женский род. однако, использовать этот переменный в несколько часть один правила, а именно в именной группа и в глагольный группе, мы тем самый указываем, что они значение должный совпадать. такой образ в привести пример мы задавать согласование подлежащее и сказуемое по число и роду. с грамматик такой вид в nltk использоваться алгоритм эрлить (earleychart parser), который находить и сохранять фрагмент разбор предложения, а потом соединять они в группы. 2.3. правило выделение синтаксический группа для русский язык правило разрабатывать мы категориальный грамматика для синтаксический парсер опираться на морфологический информацию, использовать при разметка русскоязычный текстов. в наш проект задействовать морфологический анализатор pymorphy2. чтобы использовать получить с он помощь разметка для синтаксический анализа, мы создать функцию, который представлять морфологический параметр словоформа pymorphy2 в вид терминальный элемент в категориальный грамматика nltk. из весь тегов, предоставлять морфоанализатором, мы отобрать наиболее значимый – именно этот грамматический параметр быть отразить в правило наш грамматики. например, для существительное такой значимый параметр являться род, число и падеж. всё этот категория необходимый для выделение конструкция согласовать определения. другой вариант использование информация о падеж у существительное — обязательный номинатив в позиция подлежащее при выделение конструкция предложение (клаузы). очевидно, этот параметр должный быть специфический для разный часть речи. тем не менее, некоторый часть речь (например, существительное и прилагательные, или всё неизменяемый часть речи) можно объединить в классы. и, наоборот, внутри один часть речь иногда приходиться выделять отдельный класс (глагол настоящий и прошедшее времени). значение для такой класс записываться в соответствовать поле в правило типа: noun[case=gent, gender=femn, number=sing, nf=u'ягода'] -> 'ягоды' noun[case=nomn, gender=femn, number=plur, nf=u'ягода'] -> 'ягоды' noun[case=accs, gender=femn, number=plur, nf=u'ягода'] -> 'ягоды' для весь слово анализировать текст в правило записываться также часть речи, начальный форма и словоформа. выше представить правила, записать в файл с грамматикой, соответствовать три вариант разбора, предлагать pymorphy2 для словоформа «ягоды». такой правило описывать морфология отдельный слов. основный задача в создание наш парсер — написание правило выделение синтаксический группа (grammar productions). они описывать необходимый условие для объединение составлять в тот или иной группу. к такой условие относиться линейный порядок словоформа и ограничение по они морфологический характеристикам. правило грамматика записываться в отельный файл формат .fcfg, с который работать nltk. при составление правило мы учитывать опыт другой систем, в частности, мы адаптировать для категориальный грамматика многие синтаксический группы, описать в документация синтаксический модуль аот (http://www.aot.ru/docs/synan.html). например, так выглядеть правило выделение генитивный группа (генит_ига в аот): np[+gent, case=?c, gender=?g, number=?n] -> np[case=?c, gender=?g, number=?n] np[case=gent]. правый часть правило задавать линейный порядок составлять группы, то есть именной группа + именной группа в родительный падеже, левый — её название и характеристики, который она наследовать от главное компонент сочетание (вершина группа в аот). мы написать правило для выделение отдельный именных, глагольных, предложный групп, группа с числительное и наречиями, некоторый групп, основать на сочинении. правило более высокий уровень описывают, как этот группа соединяться между собой. в общий случае, при формулирование правило нужно быть принять решение относительно того, с какой признак мы работаем, какой значение они мочь принимать и какой необходимо установить ограничения. помимо того, чтобы задавать признак строка (case=accs) или число (pers=3), мы мочь также приписывать группа некоторый параметр, иметь булев значение. мы использовать этот возможность для добавление к основной категория некоторый подкатегории. np[+adjf, case=?c, gender=?g, number=?n] -> adjp[case=?c, gender=none, number=?n] np[case=?c, gender=?g, number=?n]\n") np[+gent, case=?c, gender=?g, number=?n] -> np[case=?c, gender=?g, number=?n] np[case=gent] первый правило представлять себя объединение в именной группа согласовать прилагательное и существительного. в левый часть правило мы иметь обычный именной группа — np, однако сохранять информация о том, что она содержать в себя прилагательное +adjf, то есть параметр adjf получать значение истины. аналогично, в второй пример сохраняться информация о присоединение генитивный форма (+gent). так мы мочь сколько угодный раз усложнять наш np, и, в итоге, она остаться np и смочь играть роль субъекта, объект или генитив в более крупный группа — то есть обеспечиваться необходимый рекурсия. подобный образ можно задавать и ограничение на применение правил. сохранение информация о подкатегория позволяет, например, запретить объединять глагольный группа переходный глагола, у который уже есть прямой дополнение, с ещё один объект следующий образом: vp[+objt, number=?n, pers=?p, gender=?g, transitivity=tran] -> vp[-objt, number=?n, pers=?p, gender=?g, transitivity=tran] np[case=accs] например, при разбор фраза «видеть хвост кота» группа «видеть хвост», объединиться по этот правилу, уже не смочь присоединить к себя следующий линейно за они слово «кота» в качество объекта, так как в правый часть правило указано, что значение objt должный быть ложью. для удобство составление правило в такой системе, где важный являться сравнение значение признак категорий, мы решить обозначать отсутствовать значение признаков, такой как лицо у глагол прошедшее время и родиться у глагол настоящий и будущее времени, нулем. это позволять накладывать необходимый ограничение на правила. форма инфинитив записываться в грамматика с признак глагола, иметь значение 0. правило объединение именной и глагольный группа в предложение (без инверсии) выглядеть следующий образом: xp[-inv] -> np[case=nomn, number=?n, pers=?p, gender=?g] vp[number=?n, pers=0, gender=?g] xp[-inv] -> np[case=nomn, number=?n, pers=?p, gender=?g] vp[number=?n, pers=?p, gender=0] мы добавить весь существительное фиктивный признак 3 лица, что позволять ограничиться два привести выше правило для согласование весь существительное и местоимение с глагол настоящего, прошедшее и будущее времен. согласование происходить по число и роду, если признак лицо равный нулю, либо по число и лицу, если отсутствовать признак рода. 2.4. программный реализация синтаксический анализатор программа, реализовать наш парсер, написать на язык python (версия 3.4.3), использовать инструмент пакет nltk и морфологический анализатор pymorphy2 и, соответственно, предполагать предустановка этот три компонентов. при запуск программа в файл записываться сам грамматика, то есть разработать мы правила. этот часть грамматика обозначаться как «grammar productions». после того, как пользователь вводить предложение для разбора, оно разбиваться на токены. далее, для получить список вызываться функция, переводить морфологический информация о словоформа в вид правило категориальный грамматика и записывать они в файл с грамматикой. такой правило попадать в раздел «lexical productions». теперь у мы есть полноценный категориальный грамматика с грамматический и лексический продукциями, на основа который мочь проводиться синтаксический анализ. тогда вызываться встроить в nltk парсер, который производить разбор предложение на основа наш грамматики. допустим, пользователь вводить предложение «человек видеть лапа кота». тогда на выход быть получить следующий разбор предложение (см. рис. 1). здесь можно наглядно увидеть, какой образ категория (группы) объединяться в составлять и какой характеристика сохраняться для какой группы. при наличие синтаксический неоднозначность быть предъявить несколько вариант разбора. так выглядеть некоторый из правил, примениться при разбор данный предложения: xp[-inv] -> np[case=nomn, number=?n, pers=?p, gender=?g] vp[number=?n, pers=?p, gender=0] np[case=?c, gender=?g, number=?n] -> noun[case=?c, gender=?g, number=?n] человек vp[+objt, number=?n, pers=?p, gender=?g] -> vp[-objt, number=?n, pers=?p, gender=?g] np[case=accs] видеть лапа кот vp[tense=?t, gender=?g, number=?n, pers=?p] -> verb[tense=?t, gender=?g, number=?n, pers=?p] видеть np[case=?c, gender=?g, number=?n, +gent] -> np[case=?c, gender=?g, number=?n] np[case=gent]\n") лапа кот 3. заключение 3.1. обсуждение проблема на сегодняшний день разрабатывать парсер успешно справляться с разбор простой предложений. вместе с тем, переход наш синтаксический анализатор в рабочий состояние потребовать предварительный решение некоторый проблем. первый класс проблема связать с особенность синтаксический организация русский предложения. в частности, при работа парсер возникать сложности, вызвать относительно свободный порядок слово («мать любить дочь»), омонимия на уровень слово и словоформа (например, слово «его» с высокий индекс неоднозначности), синтаксический неоднозначность («трость из кость екатерина второй»). второй класс проблема определяться специфика функционирование и вид выходной дать морфологический анализатор pymorphy2. в частности, мы вынудить быть преодолеть следующий трудности. некоторый короткий слово (союз «и», предлог «в») морфоанализатор pymorphy2 размечать как сокращение от более длинный слово («исполняющий»), что порождать несколько вариант разбора, казаться бы, однозначный предложения. на данный момент быть принять решение использовать только первый вариант разбор в pymorphy2, который как раз и представлять себя нужный предлог или союз. pymorphy2 избирательно проводить анализ субстантивировать прилагательных. так, слово «красный» размечаться как существительное, в то же время слово «больной» трактоваться исключительно как прилагательное. обычный арабский цифра pymorphy2 присваивать значение numr, но при это не хранить это значение в тот же переменной, куда помещать дать о часть речь и характеристика другой токенов. это создавать трудность в извлечение информация для парсера. морфологический анализатор не справляться с разбор слов, в который произвести замена буква «ё» на «е», хотя в современный русский письменный речь это явление считаться достаточно распространённым. третий категория проблема вызвать особенность устройство категориальный грамматика в nltk. в первый очередь нужно отметить, что грамматика составлять хорошо зарекомендовать себя в автоматический обработка язык с более строгий порядок слов, такой как английский или немецкий. в русский язык синтаксический группа мочь быть разнести по весь предложению, поэтому они выделение порой представлять себя определённый трудности. многие современный синтаксический анализатор в избежание подобный проблема опираться на грамматика зависимость (например, анализатор этап-3 [6]), другой же стремиться реализовать гибридный подход (например, метод тринотация в парсер treeton [17]). ещё один сложность связать с тем, что контекстно-свободный грамматики, к который относиться использовать мы категориальный грамматика, задаваться на основа формальный морфологический параметр и не учитывать лексический значение слова, что не позволять разработчик опираться на семантический свойство лексема для устранение возникать синтаксический неоднозначности. наконец, категориальный грамматика в nltk считать свой разбор верный только тогда, когда мочь построить дерево составлять полностью. в случай если грамматика не мочь присвоить категория хотя бы один токен в предложении, она считать всё остальной составить группа по умолчание неверными. это не представляться мы целесообразным, так как, во-первых, важный любой информация о фрагмент структура предложения, во-вторых, для некоторый задача автоматический обработка текст не требоваться полный разбор предложения. 3.2. перспектива развитие исследование на данный момент функционировать ядро синтаксический анализатор для русский язык на основа библиотека nltk. при расширение ядро мы планировать увеличить количество правил: быть добавить правило для работа с числительными, причастный и деепричастный оборотами, вводный словами. также быть создать механизм выбор более вероятный разбор предложения. в основа это механизм быть лежать концепция сила связь между член предложения, принять в теория конструктивный синтаксис н.ю. шведовой [18]. мы планировать ввести в парсер дополнительный механизм задание приоритет для правил. так, например, более предпочтительный быть считаться разбор с немаркированный порядок слово («субъект-глаголпредикат»). кроме того, с помощь дополнительный набор правило мы ввести возможность разбирать фрагмент предложение в тот случае, если оно не мочь быть разобрать целиком. наконец, мы планировать синхронизировать наш синтаксический анализатор с ранее создать и протестировать гибридный морфологический анализатором, использовать теггера nltk и pymorphy2 [19]. по итог провести исследование можно утверждать, что идея создание синтаксический анализатор на основа категориальный грамматика являться состоятельной. на данный момент мы продолжать работа над расширение список правило и устранение ошибка анализа, чтобы перейти к тестирование парсер на русскоязычный корпус текст и оценка результат он разборов. 3.3. благодарность исследование поддержать грант рффи № 16-06-00529 «разработка лингвистический комплекс для автоматический семантический анализ русскоязычный корпус текст с применение статистический методов».