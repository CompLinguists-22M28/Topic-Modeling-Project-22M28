а.в. андреев архитектура информационно-поисковый система для индоевропейский компьютерный тезаурус [проект "индоевропейский компьютерный тезаурус" поддержать грант ргнф № 03-04-00223а]. индоевропейский компьютерный тезаурус (в дальнейший - тезаурус) совмещать в себя черта документальный и фактогра- фичёска информационно-поисковый система (ипс). хотя ос- новный элемент дать являться текст - быть то источник или исследование, задача тезаурус предполагать и хранение боль- шой объём структурировать информация (своия родиться мета- данных). при это структура дать мочь быть очень сложной: она включать в себя не только структурировать описание сущ- ность (такий как, например, языковой формы) и связь между они (например, этимология или библиографический привязка), но и связь между связь - так, два этимология мочь подкреп- лять друг друг или, наоборот, взаимоисключаться. в свой оче- редь, связь между два этимология мочь быть предмет критики, что приводить к связь ещё более высокий порядка, и так далее. более того, между два сущность мочь быть несколько связь один типа, различающихся, однако свой модальность (т.е. связь высокий порядка). наконец, и коли- чество тип связь достаточно большой - помимо этимология должный учитываться и семантические, и фонологический отно- шения. отсюда, в частности, следует, что универсальный поисковый система для тезаурус быть слишком сложный для обыкновен- ный пользователя-лингвиста, который интересовать решение тот или иной конкретный проблемы, а не освоение громоздкий язык запросов. поэтому тезаурус не мочь не быть, так сказать, "ме- тасистемой", оболочкой, допускать настройка на достаточно узкий проблемный область (но при это такой настройка должный производиться скорее лингвистами, чем программистами). далее, физически дать мочь быть представить на разный носитель и в разный форме, но работа с они должный произ- водиться единообразно. это прежде весь относиться к данным, ко- торой по технический или лицензионный причина не мочь быть поместить "внутрь" тезаурус - например, корпус древний тек- ст на компакт-диск (tlg - thesaurus linguae graecae, tll - thesaurus linguae latinae, корпус надпись phi - packard huma- nities institute) или web-ресурс аналогичный содержания, напри- мер, perseus. информация в тезаурус не устаревает, в связь с чем необ- ходить обеспечить независимость дать и лингвистический процедура от использовать аппаратный и программный обес- печения. и если переносимость дать легко обеспечиваться ис- пользование хорошо документированный и распространить формата, то переносимость процедура накладывать серьёзный ог- раничение на архитектура система (см. ниже). наконец, хотя вопрос производительность система играть второстепенный роль, они нельзя полностью пренебречь, так как алгоритм обработка дать мочь быть весьма "прожорливыми". теперь перейти к описание собственно архитектурный особенность информационно-поисковый система тезауруса. ипс организовать по принцип "клиент-сервер", причём весь обработка происходить централизованно, а на доля клиент выпадать только взаимодействие с пользователь (в настоящий момент через web-интерфейс, хотя возможный разработка и специ- ализировать приложения). в качество основный формат дать в наш ипс высту- паета формат tei (text encoding initiative), причём логически весь информация представлять себя единый tei-документ (так назы- вать tei corpus), что позволять в полный мера воспользоваться встроить в tei система описание связей. поскольку tei основать на sgml, поддержка другой sgml- и xml-совместимый формат (например, html или opentag) не представлять особый трудностей. что касаться программный реализации, то требование на- страиваемость и переносимость предполагать двухуровневый структура - ядро, представлять себя некоторый специали- зированный язык программирование высокий уровня, и лингвис- тический процедуры, написать на это языке. изначально предполагаться использовать связка "c + tcl", но это решение оказаться неприемлемым: система получаться громоздкой, неста- бильный и очень медленной. в конец концов, быть решить реали- зовать система на язык common lisp, поскольку он позволять создавать проблемно-ориентированный язык внутри сам себя без потеря производительности. основной платформа для раз- работка являться gnu/linux (дистрибутив gentoo), а в качество компилятор common lisp' использоваться cmucl (свободный реализация, разрабатывать в университет карнеги-меллоно в сша; отличаться высокий качеством), однако система мочь быть легко перенести в любой среду, для который есть реализация common lisp'а. разработать мы язык высокий уровень (мы назвать он "универсальный структурный процессор" - усп) представлять из себя по быть система продукций, оперировать фрагмент дерево (синтаксис lisp'а, как известно, очень подходить для опи- сания древовидный структур). программа, такой образом, состо- ит из набор образец и соответствовать они шаблон деревьев. дерево, подавать на вход программы, поочерёдно сравни- ваться с образцами. после того, как соответствие найдено, стро- иться выходной дерево по шаблону, возможно, с использование фрагмент исходный дерево и результат вызов другой прог- рамма усп, а также произвольный lisp-функций. на основа это ядро строиться библиотека модуль лингви- стичёска обработки, из который следовать отметить модуль авто- матичёска разметка текста. последний осуществлять восста- новление логический структура текст по он физический фор- матирование (точность его, правда, не превышать 80%, но и это существенно упрощать подготовка материалов). помимо этого, библиотека содержать и проблемно-независи- мые процедура для преобразование дать в/из формат tei, а также для преобразование в рамка tei, такой как нормализация или перекодирование из один набор символ в другой. второй компонент система - это набор интерфейсный моду- лей, обеспечивать взаимодействие ипс с пользователь и с внешний источник данных. модуль написать в основный на common lisp' и частично на с. в настоящий время вестись ра- бот над следующий модулями. 1. модуль доступ к локальный данным. он обеспечивать разбор документ sgml и xml (sgml поддерживаться не пол- ностью, а только в рамках, определять tei. впрочем, есть возможность использовать внешний парсер, например, из проект openjade). помимо этого, он обеспечивать индексация доку- мент (с использование cистем berkley db 4, хотя в прин- ципа мочь использоваться и реляционный бд). 2. модуль доступ к внешний источник данных: а) к корпус текст на компакт-дисках. это набор моду- лей, обеспечивать доступ к дать на cdrom, такой как tlg, tll, phi и т.д. б) к корпус текст web. дать модуль обеспечивать доступ к текст по протокол http. иметься модуль, обеспе- чивать базовый функциональность, т.е. извлечение web- страница по адресу, и дополнительный модули, обеспечивать взаимодействие с конкретный сайтами, такой как perseus или titus. в) к другой экземпляр ипс. данный модуль позволить организовать тезаурус как распределённый систему, в который различный дать мочь физически находиться на разный ком- пьютерах. 3. модуль web-интерфейса. 4. модуль печати, являться интерфейс к система tex/latex. он позволяет, в частности, оформлять результат поиск в вид pdf-документов, что достаточно важно, так как html, даже в сочетание с unicode'ом, далеко не всегда мочь адекватно отразить использовать символы. в будущее планироваться также добавить поддержка для дру- гих язык обработки, помимо усп, такой как dsssl, xslt, xquery и tcl, а также расширить набор поддерживать источ- ник данных, в первый очередь за счёт реализация протокол доступ к online-словарь dict. 1 5