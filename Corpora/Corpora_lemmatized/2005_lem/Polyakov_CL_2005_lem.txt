а.e. поляк (нтц «информрегистр» минсвязи рф), с.о. савчук (институт русский язык им. в.в. виноградов ран) технология представление информация в национальный корпус русский язык 1. введение национальный корпус русский язык (http://ruscorpora.ru) представлять себя коллекция электронный текстов, снабдить обширный лингвисти-чёска и метатекстовый информацией. корпус представлять всё разнообразие стилей, жанр и вариант русский язык xix–xx вв. и иметь объём более 50 млн. слов. по объём и представительность корпус русский язык стоить вровень с такой национальный корпусами, как британский (bnc) и чешский (čnk). корпус активно использоваться для решение исследовательский задача в область изучение лексика и грамматика русский языка. корпус содержать разметка следующий тип информации: a. метатекстовый разметка – признаки, характеризовать текст в целом. сюда входят: автор (имя, пол, возраст), заглавие, дата создания, объем, тематика, тип текста, жанр, сфера функционирование и т.д. b. лексический разметка – признаки, характеризовать отдельный слово. сюда входят: 1) грамматический признаки: лемма (словарный форма), часть речи, род, число, падеж, вид, наклонение, время, лицо и т.д.; 2) семантический признаки: таксономический класс, мереология (отноше¬ние часть/целое), оценка, каузация, словообразовательный связь и т.д. в корпус также использоваться элемент синтаксический разметка и специальный признак для некоторый вид текст (разговорные, драмати-ческие, диалектные). в часть корпус сделать более точный разметка, а именно: снятой грамматический омонимия, разметить семантический признаки, расстав-лена акценты. 2. принцип представление информация в корпус формат представление информация в корпус быть разработать с учёт существующий стандарт для кодирование корпус (tei, xces, eagles), но в значительный степень ориентировать на стандарт интернет (html, xml). при детальный рассмотрение универсальный стандарт тип tei оказаться слишком сложными, избыточный и неудобный для массовый применения. кроме того, оказалось, что нет программ, который мочь бы эффективно обрабатывать и искать информация в этот форматах. основной режим работа с корпус – это поиск слово и словосочетание по лексический признак (грамматическим, семантический и др.) с учёт контекста, расстояние между словами, а также метатекстовый информации. для реализация этот требование необходимый поисковый система, специально ориен-тировать на контекстный поиск в огромный массив текст – тип яндекс или google. для это не подходить обычный реляционный база данных, потому что при увеличение сложность запрос она давать экспоненциальный рост время ответ (особенно на массив в десяток миллион слов). для это не подходить и xml-ориентировать база данных, потому что они эффективный только для небольшой документ и не учитывать контекстный отношения. поэтому для работа корпус использоваться поисковый «движок» яндекса, который выполнять самый сложный контекстный поиск в огромный массив текст корпус за доля секунды. формат корпус представлять себя подмножество html, к который добавить несколько специфический тег для грамматический и структурный информации. этот формат обеспечивать компактность представления, удобство для восприятие человеком, совместимость с использовать по, включая парсер (mystem и dialing) и поисковый «движок» яндекса, возможность автомати¬зация разметка и лёгкость конвертирование в другой форматы. формат являться очень простой и предъявлять минимальный требование к объём и содержание разметки, в отличие от tei или xces. спецификация определять правило разметки, достаточный для представление существенный информация о тексте, включая: 1) метатекстовый атрибуты; 2) структурный элемент текст (части, главы, абзацы, стихи, сноски); 3) синтаксический структура текст (предложения, клаузы, группы); 4) лексический информация (грамматические, семантический признаки); 5) элемент оформление текста, специальный символ и т.д. в основный текст размечаться только граница абзацев, а также наибо¬лый важный структурный элемент текст (заголовок разделов, стихи, сноски). метатекстовый атрибут представляться при помощь стандартный тег meta. для синтаксический и лексический информация использоваться специальный теги, частично заимствовать из tei (st – предложение, w – слово, cl – клауза, gr – группа), который не входить в стандарт html, но успешно индексироваться и искаться яндексом. лексический информация помещаться не в отдельный теги, как в tei, а в атрибут тег w, поэтому разметка слово иметь вид: <w lex='лемма' gr='граммемы' sem='семемы'>слово</w>. основной структурный блок текст в корпусе: слово, предложение и абзац. слово и сочетание слово всегда искаться в контекст предложения, а в результат поиск выдаваться список найти предложений. при необходить-мостить контекст мочь быть расширить до абзаца, но не далее того. спецификация определять формат представление текст на различный этап обработки, который различаться объём и содержание разметки: 1) текст с минимальный структурный разметка (без лингвистической); 2) текст с грамматический разметка с неснятый омонимией; 3) текст с снятой омонимией; 4) выходной формат для яндекс-сервера. 3. технология подготовка информация для корпус технология подготовка текст для корпус включать следующий этапы: 1) перевод текст в html-формат с минимальный структурный разметкой; 2) грамматический разметка и снятие омонимия (в часть корпуса); 3) метаразметка текстов; 4) преобразование в выходной формат для яндекс-сервера. на каждый последующий этап объём и содержательность разметка всё время увеличивается, но потенциально разметка не иметь верхний предела. для поддержка технологический процесс разработать комплекс про-грамм и методик, позволять автоматизировать наиболее трудоёмкий операции. на 1-й этап использоваться конвертор и макрос для преобразование текст в формат корпуса. исходный текст для корпус бывать представить в различный форматах, из который отметить наиболее распространенные: 1. простой текст без оформление или с простейшее оформление (plain text). в это формат абзац обычно обозначаться при помощь начальный пробелов, часто сохраняться перенос слов, шрифтовой выделение обозна-чаться символ _ * и т.д. при перевод в html лишний пробел и пере¬нос убираются, абзац заменяться на тег <p>, размечаться структур¬ный элемент (заголовок разделов, стихи), добавляться шрифтовой команды. для обработка такой текст разработать набор конвертор и макрос (гло¬баль¬ный замен), позволять быстро получить результат в правильный формате. 2. текст с «богатой» html-разметкой, обычно получить из интернет. основный проблема такой текст – огромный объём избыточный разметка (от 50 до 90%), не относиться к содержание текста, а служащий для дизайна: баннеры, счетчики, скрипты, навигационный ссылки, меню, таблицы, иконки. здесь содержание приноситься в жертва художественный оформлению, а при отсутствие стандарт структурирование информация становиться очень трудно выделить содержание текст из дизайнерский «мусора». почти для каждый сайт приходиться разрабатывать специальный фильтр, который удалять избыточный разметка и выделять содержание текста, но даже после это приходиться вручную удалять лишний разметку. 3. формат rtf и формат другой программа подготовка текстов, который можно преобразовать в rtf (pagemaker, quarkexpress). для такой текст разработать набор макрос и замен, позволять получить требовать код html с минимальный разметкой, поскольку стандартный конвертор создавать чрезмерно сложный код html, избыточный для наш задач. 4. формат pdf обрабатываться по технология rtf или как простой текст, в зависимость от сложность и возможность существующий конверторов. 5. табличный данные, представить текстовый формат с разделить-телить (csv, tsv), который содержать метатекстовый атрибут и короткий текст. для такой дать разработать конверторы, который из каждый строка таблица генерировать готовый файл с текст и атрибутами. на 2-й этап подготовка использоваться следующий программы: 1. грамматический парсер (dialing, mystem) приписывать каждый слово всё возможный грамматический разбор с учёт синтаксический контекста. 2. грамматический фильтр (gram.bat) исправлять результат работа парсера: удалять лишний вариант разбора, помечать маловероятный варианты, добавлять и переставлять граммемы, и т.д. 3. редактор вариант для ручной снятие омонимия (gramedit) позволять выбирать и редактировать вариант разбор в среда winword. результат работа являться текст с снятой омонимией. на 3-й этап (метаразметка) использоваться следующий программы: 1. таблица excel использоваться для хранение метатекстовый атрибут и технологический информации, а также для они редактирование и проверка при помощь встроить средство excel (фильтры, список значений). 2. программа перенос мета-атрибут между мета-таблица и текста-ми. программа metas собирать атрибут из текст и создавать заготовка мета-таблицы, который далее правиться вручную. после окончание правка программа meta2txt переносить атрибут из мета-таблица в реальный тексты. такой обра¬зом, метаразметка иметь итеративный характер. 3. программа проверка мета-таблица (metatest) сравнивать атрибут в мета-таблица с нормативный таблица и помечать неверный значения, который должный быть исправить вручную. поскольку метатекстовый атрибут обрабатываться отдельно от сам текстов, то этап 2 и 3 мочь выполняться параллельно и независимо друг от друга. но при это существовать проблема синхронизация между мета-табли¬ца и текстами, который решаться при помощь указанный выше программ. на 4-й этап подготовить текст с метаразметка и иногда с снятой омонимия загружаться на яндекс-сервер. при это используются: 1. конвертор, который преобразовать рабочий формат разметка в формат для яндекса, проверять некоторый ошибка разметки, переводить имя граммема на латиницу, добавлять видовой пара глагол для улучшение поиска, и т.д. 2. программа семантический разметка (semmarkup) приписывать слово основной семантический признак по семантический словарю. это позволять осуществить семантический поиск в часть корпус с снятой омонимией. 3. статистический программа (gramstat, metastat) генерировать статистика распределение для грамматический и метатекстовый признаков. это позволять обнаружить и исправить ошибка разметка до окончательный загрузки.