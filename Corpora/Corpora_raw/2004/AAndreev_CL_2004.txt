    А.В. Андреев
АРХИТЕКТУРА  ИНФОРМАЦИОННО-ПОИСКОВОЙ 
СИСТЕМЫ  ДЛЯ  ИНДОЕВРОПЕЙСКОГО 
КОМПЬЮТЕРНОГО  ТЕЗАУРУСА
     [Проект "Индоевропейский компьютерный тезаурус" поддержан 
грантом РГНФ № 03-04-00223а].
    Индоевропейский Компьютерный Тезаурус (в дальнейшем -
Тезаурус) совмещает в себе черты документальной и фактогра-
фической информационно-поисковой системы (ИПС). Хотя ос-
новным элементом данных является текст - будь то источник или 
исследование, задачи Тезауруса предполагают и хранение боль-
шого объема структурированной информации (своего рода мета-
данных). При этом структура данных может быть очень сложной: 
она включает в себя не только структурированное описание сущ-
ностей (таких как, например, языковые формы) и связей между 
ними (например, этимология или библиографическая привязка), 
но и связей между связями - так, две этимологии могут подкреп-
лять друг друга или, наоборот, взаимоисключаться. В свою оче-
редь, связь между двумя этимологиями может быть предметом 
критики, что приводит к связям еще более высокого порядка, и 
так далее. Более того, между двумя сущностями может быть 
несколько связей одного типа, различающихся, однако своими 
модальностями (т.е. связями высшего порядка). Наконец, и коли-
чество типов связей достаточно велико - помимо этимологии 
должны учитываться и семантические, и фонологические отно-
шения.
    Отсюда, в частности, следует, что универсальная поисковая 
система для Тезауруса будет слишком сложной для обыкновен-
ного пользователя-лингвиста, которого интересует решение той 
или иной конкретной проблемы, а не освоение громоздкого языка 
запросов. Поэтому Тезаурус не может не быть, так сказать, "ме-
тасистемой", оболочкой, допускающей настройку на достаточно 
узкую проблемную область (но при этом такая настройка должна 
производиться скорее лингвистами, чем программистами).
    Далее, физически данные могут быть представлены на разных 
носителях и в разной форме, но работа с ними должна произ-
водиться единообразно. Это прежде всего относится к данным, ко-
торые по техническим или лицензионным причинам не могут быть 
помещены "внутрь" Тезауруса - например, корпуса древних тек-
стов на компакт-дисках (TLG - Thesaurus Linguae Graecae, TLL - 
Thesaurus Linguae Latinae, корпус надписей PHI - Packard Huma-
nities Institute) или Web-ресурсы аналогичного содержания, напри-
мер, Perseus.
    Информация в Тезаурусе не устаревает, в связи с чем необ-
ходимо обеспечить независимость данных и лингвистических 
процедур от используемого аппаратного и программного обес-
печения. И если переносимость данных легко обеспечивается ис-
пользованием хорошо документированного и распространенного 
формата, то переносимость процедур накладывает серьезные ог-
раничения на архитектуру системы (см. ниже).
    Наконец, хотя вопросы производительности системы играют 
второстепенную роль, ими нельзя полностью  пренебречь, так как 
алгоритмы обработки данных могут быть весьма "прожорливыми".
    Теперь перейдем к описанию собственно архитектурных 
особенностей информационно-поисковой системы Тезауруса.
    ИПС организована по принципу "клиент-сервер", причем 
вся обработка происходит централизованно, а на долю клиента 
выпадает только взаимодействие с пользователем (в настоящий 
момент через Web-интерфейс, хотя возможна разработка и специ-
ализированного приложения).
    В качестве основного формата данных в нашей ИПС высту-
пает формат TEI (Text Encoding Initiative), причем логически вся 
информация представляет собой единый TEI-документ (так назы-
ваемый TEI corpus), что позволяет в полной мере воспользоваться 
встроенной в TEI системой описания связей.
    Поскольку TEI основан на SGML, поддержка других SGML- 
и XML-совместимых форматов (например, HTML или OpenTag) 
не представляет особых трудностей.
    Что касается программной реализации, то требования на-
страиваемости и переносимости предполагают двухуровневую 
структуру - ядро, представляющее собой некоторый специали-
зированный язык программирования высокого уровня, и лингвис-
тические процедуры, написанные на этом языке. Изначально 
предполагалось использовать связку "C + Tcl", но это решение 
оказалось неприемлемым: система получалась громоздкой, неста-
бильной и очень медленной. В конце концов, было решено реали-
зовать систему на языке Common Lisp, поскольку он позволяет 
создавать проблемно-ориентированные языки внутри самого себя 
без потери производительности. Основной платформой для раз-
работки является GNU/Linux (дистрибутив Gentoo), а в качестве 
компилятора Common Lisp'а используется CMUCL (свободная 
реализация, разрабатываемая в университете Карнеги-Меллона в 
США; отличается высоким качеством), однако система может 
быть легко перенесена в любую среду, для которой есть 
реализация Common Lisp'а.
    Разработанный нами язык высокого уровня (мы назвали его 
"универсальный структурный процессор" - УСП) представляет 
из себя по сути систему продукций, оперирующих фрагментами 
деревьев (синтаксис Lisp'а, как известно, очень подходит для опи-
сания древовидных структур). Программа, таким образом, состо-
ит из набора образцов и соответствующих им шаблонов деревьев. 
Дерево, подаваемое на вход программы, поочередно сравни-
вается с образцами. После того, как соответствие найдено, стро-
ится выходное дерево по шаблону, возможно, с использованием 
фрагментов исходного дерева и результатов вызова других прог-
рамм УСП, а также произвольных Lisp-функций.
    На основе этого ядра строится библиотека модулей лингви-
стической обработки, из которых следует отметить модуль авто-
матической разметки текста. Последний осуществляет восста-
новление логической структуры текста по его физическому фор-
матированию (точность его, правда, не превышает 80%, но и это 
существенно упрощает подготовку материалов).
    Помимо этого, библиотека содержит и проблемно-независи-
мые процедуры для преобразования данных в/из формата TEI, а 
также для преобразований в рамках TEI, таких как нормализация 
или перекодирование из одного набора символов в другой.
    Второй компонент системы - это набор интерфейсных моду-
лей, обеспечивающих взаимодействие ИПС с пользователями и с 
внешними источниками данных. Модули написаны в основном 
на Common Lisp'е и частично на С. В настоящее время ведется ра-
бота над следующими модулями.
    1. Модуль доступа к локальным данным. Он обеспечивает 
разбор документов SGML и XML (SGML поддерживается не пол-
ностью, а только в рамках, определяемых TEI. Впрочем, есть 
возможность использовать внешний парсер, например, из проекта 
OpenJADE). Помимо этого, он обеспечивает индексацию доку-
ментов (с использованием cистемы Berkley DB 4, хотя в прин-
ципе может использоваться и реляционная БД).
    2. Модули доступа к внешним источникам данных:
    а) к корпусам текстов на компакт-дисках. Это набор моду-
лей, обеспечивающих доступ к данным на CDROM, таким как 
TLG, TLL, PHI и т.д.
    б) к корпусам текстов Web. Данные модули обеспечивают 
доступ к текстам по протоколу HTTP. Имеется модуль, обеспе-
чивающий базовую функциональность, т.е. извлечение Web-
страниц по адресу, и дополнительные модули, обеспечивающие 
взаимодействие с конкретными сайтами, такими как Perseus или 
TITUS.
    в) к другим экземплярам ИПС. Данный модуль позволит 
организовать Тезаурус как распределенную систему, в которой 
различные данные могут физически находится на разных ком-
пьютерах.
    3. Модуль Web-интерфейса.
    4. Модуль печати, являющийся интерфейсом к системе 
TeX/LaTeX. Он позволяет, в частности, оформлять результаты 
поиска в виде PDF-документов, что достаточно важно, так как 
HTML, даже в сочетании с Unicode'ом, далеко не всегда может 
адекватно отразить используемые символы.
    В будущем планируется также добавить поддержку для дру-
гих языков обработки, помимо УСП, таких как DSSSL, XSLT, 
XQuery и Tcl, а также расширить набор поддерживаемых источ-
ников данных, в первую очередь за счет реализации протокола 
доступа к online-словарям DICT.
 
 
 
 
1
    
5
    
